(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{460:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"开发岗-冷门考点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发岗-冷门考点"}},[t._v("#")]),t._v(" 开发岗-冷门考点")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")])]),s("li",[s("a",{attrs:{href:"#_1-树状数组-binary-indexed-tree-⭐️"}},[t._v("1.树状数组（Binary Indexed Tree）⭐️")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-1-引入问题"}},[t._v("1.1.引入问题")])]),s("li",[s("a",{attrs:{href:"#_1-2-前置知识-lowbit-操作"}},[t._v("1.2.前置知识- lowbit()操作")])]),s("li",[s("a",{attrs:{href:"#_1-3-树状数组-思想及实现"}},[t._v("1.3.树状数组–思想及实现")])]),s("li",[s("a",{attrs:{href:"#_1-4-树状数组的扩展应用"}},[t._v("1.4.树状数组的扩展应用")])]),s("li",[s("a",{attrs:{href:"#_1-5-总结与代码"}},[t._v("1.5.总结与代码")])])])]),s("li",[s("a",{attrs:{href:"#_2-线段树⭐️"}},[t._v("2.线段树⭐️")]),s("ul",[s("li",[s("a",{attrs:{href:"#_2-1-线段树的基本概念"}},[t._v("2.1.线段树的基本概念")])]),s("li",[s("a",{attrs:{href:"#_2-2-一维线段树"}},[t._v("2.2.一维线段树")])]),s("li",[s("a",{attrs:{href:"#_2-3-二维线段树"}},[t._v("2.3.二维线段树")])])])]),s("li",[s("a",{attrs:{href:"#_3-主席树⭐️"}},[t._v("3.主席树⭐️")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-主席树基础"}},[t._v("3.1.主席树基础")])]),s("li",[s("a",{attrs:{href:"#_3-2-为什么叫-主席树-呢"}},[t._v("3.2.为什么叫“主席树”呢？")])])])]),s("li",[s("a",{attrs:{href:"#_4-设计跳表"}},[t._v("4.设计跳表")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-1-跳表"}},[t._v("4.1.跳表")])]),s("li",[s("a",{attrs:{href:"#_4-2-添加节点"}},[t._v("4.2.添加节点")])])])]),s("li",[s("a",{attrs:{href:"#_6-字符串string匹配"}},[t._v("6.字符串string匹配")]),s("ul",[s("li",[s("a",{attrs:{href:"#_7-1-bf算法『暴力』"}},[t._v("7.1.BF算法『暴力』")])]),s("li",[s("a",{attrs:{href:"#_7-2-rk算法"}},[t._v("7.2.RK算法")])]),s("li",[s("a",{attrs:{href:"#_7-3-horspool算法-低配版的bm算法"}},[t._v("7.3.Horspool算法（低配版的BM算法）")])]),s("li",[s("a",{attrs:{href:"#_7-3-bm-boyer-moore-算法"}},[t._v("7.3.BM（Boyer Moore）算法")])])])]),s("li",[s("a",{attrs:{href:"#参考资料"}},[t._v("参考资料")])])])]),s("p"),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("h2",{attrs:{id:"_1-树状数组-binary-indexed-tree-⭐️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-树状数组-binary-indexed-tree-⭐️"}},[t._v("#")]),t._v(" 1.树状数组（Binary Indexed Tree）⭐️")]),t._v(" "),s("p",[t._v("参考："),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1pE41197Qj",target:"_blank",rel:"noopener noreferrer"}},[t._v("B站传送门"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"_1-1-引入问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引入问题"}},[t._v("#")]),t._v(" 1.1.引入问题")]),t._v(" "),s("p",[t._v("引入问题")]),t._v(" "),s("ul",[s("li",[t._v("给出一个长度为n的数组,完成以下两种操作\n●将第x个数加上k\n●输出区间[x,y]内每个数的和\n题目来源: Luogu P3374树状数组1\n给出一个数组要求支持"),s("strong",[t._v("单点修改")]),t._v("和"),s("strong",[t._v("区间和的查询")]),t._v("操作")])]),t._v(" "),s("h4",{attrs:{id:"_1-1-1-对比两种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-对比两种情况"}},[t._v("#")]),t._v(" 1.1.1.对比两种情况")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th"),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td",[t._v("暴力算法")]),t._v(" "),s("td",[t._v("引入DS-树状数组")])]),t._v(" "),s("tr",[s("td",[t._v("单点修改")]),t._v(" "),s("td",[t._v("$O(1)$")]),t._v(" "),s("td",[t._v("$O(logn)$")])]),t._v(" "),s("tr",[s("td",[t._v("区间和查询")]),t._v(" "),s("td",[t._v("$O(n)$")]),t._v(" "),s("td",[t._v("$O(logn)$")])]),t._v(" "),s("tr",[s("td",[t._v("n次查询，大数据量情况")]),t._v(" "),s("td",[t._v("O(n"),s("sup",[t._v("2")]),t._v(")")]),t._v(" "),s("td",[t._v("$O(nlogn)$")])])])]),t._v(" "),s("p",[t._v("正是因为上面，朴素算法的大规模数据区间和查询复杂度太高了，所以引入了“树状数组”这种数据结构来降低复杂度。")]),t._v(" "),s("h3",{attrs:{id:"_1-2-前置知识-lowbit-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-前置知识-lowbit-操作"}},[t._v("#")]),t._v(" 1.2.前置知识- lowbit()操作")]),t._v(" "),s("p",[t._v("lowbit()操作：")]),t._v(" "),s("ul",[s("li",[t._v("它表示非负整数在二进制表示下最低位1和后面的0构成的十进制数值")])]),t._v(" "),s("p",[s("code",[t._v("eg. lowbit(44)")]),t._v("=lowbit( (101"),s("strong",[t._v("100")]),t._v(")"),s("sub",[t._v("2")]),t._v(" )=("),s("strong",[t._v("100")]),t._v(")"),s("sub",[t._v("2")]),t._v("=4")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("由位运算容易知道：")])]),t._v(" "),s("li",[s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("101100\n010011\n加一\n010100\n然后，按位&\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("p",[s("code",[t._v("$$lowbit(n)= n&( (~n)+1 ) = n&( ~n+1 )$$")])]),t._v(" "),s("p",[t._v("此外，因为计算机存储使用的是补码，取反加一后获得的是负的这个值。\n"),s("code",[t._v("~n+1=-n")])]),t._v(" "),s("p",[t._v("所以，"),s("code",[t._v("lowbit(n)=n&(-n)")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-树状数组-思想及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-树状数组-思想及实现"}},[t._v("#")]),t._v(" 1.3.树状数组–思想及实现")]),t._v(" "),s("p",[t._v("由于求的是“区间和查询”-》想到-》前缀和相减的方法-》使用树形结构来维护，就会把复杂度降到$O(logn)$")]),t._v(" "),s("p",[t._v("对于一个序列，我们在其上建立一个这样的森林结构：\n"),s("font",{staticStyle:{background:"yellow"},attrs:{size:"3"}},[t._v("每个节点t[x]保存以x为根的子树中叶节点值的和")])],1),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%8401.png",alt:"树状数组01"}})]),t._v(" "),s("ul",[s("li",[t._v("问题：")]),t._v(" "),s("li",[t._v("那么每个节点覆盖的长度是多少呢？")])]),t._v(" "),s("h4",{attrs:{id:"_1-3-1-观察1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-观察1"}},[t._v("#")]),t._v(" 1.3.1.观察1")]),t._v(" "),s("p",[t._v("把每个节点"),s("code",[t._v("t[x]")]),t._v("的"),s("code",[t._v("x")]),t._v("转化为二进制后")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A7%82%E5%AF%9F02.png",alt:"树状数组二进制观察02"}})]),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"},attrs:{size:"3"}},[t._v("我们会发现每一层的"),s("strong",[t._v("末尾的零")]),t._v("的个数都是相同的（我用红色箭头标记了）")])],1),t._v(" "),s("h4",{attrs:{id:"_1-3-2-观察2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-观察2"}},[t._v("#")]),t._v(" 1.3.2.观察2")]),t._v(" "),s("p",[t._v("进一步观察知道："),s("strong",[t._v("t[x]节点覆盖的长度就是lowbit(x)")]),t._v(" "),s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%95%B0%E7%BB%84%E6%95%B0%E7%BB%84%E5%92%8Clowbit03.png",alt:"数组数组和lowbit03"}})]),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"},attrs:{size:"3"}},[t._v("1、t[x]节点的父节点为t[x + lowbit(x)] ")]),t._v(" "),s("font",{staticStyle:{background:"yellow"},attrs:{size:"3"}},[t._v("2、整颗树的高度为$logn+1$ ")])],1),t._v(" "),s("h4",{attrs:{id:"_1-3-3-归纳出公式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-归纳出公式"}},[t._v("#")]),t._v(" 1.3.3.归纳出公式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%95%B0%E7%BB%84%E6%95%B0%E7%BB%84%E5%85%AC%E5%BC%8F04.png",alt:"数组数组公式04"}})]),t._v(" "),s("h4",{attrs:{id:"_1-3-4-代码-add-n-k"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4-代码-add-n-k"}},[t._v("#")]),t._v(" 1.3.4.代码，add(n,k)")]),t._v(" "),s("p",[t._v("向x号位置进行加k")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//for(; x<=n; x+=lowbit(x) )")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h4",{attrs:{id:"_1-3-5-ask操作-核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-5-ask操作-核心"}},[t._v("#")]),t._v(" 1.3.5.ask操作（核心）")]),t._v(" "),s("ul",[s("li",[t._v("查询这个点的前缀和，需要从这个点"),s("strong",[t._v("向左上")]),t._v("找到上一个节点，"),s("strong",[t._v("并加上其节点")]),t._v("的值")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84ask%E6%93%8D%E4%BD%9C05.png",alt:"树状数组ask操作05"}})]),t._v(" "),s("h4",{attrs:{id:"_1-3-6-再次观察"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-6-再次观察"}},[t._v("#")]),t._v(" 1.3.6.再次观察")]),t._v(" "),s("ul",[s("li",[t._v("可以发现向左上找上一个节点只需要将"),s("code",[t._v("下标-=lowbit(这个节点的下标)")])])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//for(; x ; x-=lowbit(x) )")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \trt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("然后，如果我们要求区间和，我们可以分别求出前缀和，并相减")]),t._v(" "),s("h3",{attrs:{id:"_1-4-树状数组的扩展应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-树状数组的扩展应用"}},[t._v("#")]),t._v(" 1.4.树状数组的扩展应用")]),t._v(" "),s("p",[t._v("树状数组-》是一个动态维护前缀和的工具-》我们需要灵活应用它")]),t._v(" "),s("ul",[s("li",[t._v("（1）单点修改+区间查询（前面的例子）")]),t._v(" "),s("li",[t._v("（2）区间修改，单点查询")]),t._v(" "),s("li",[t._v("（3）区间修改，区间查询等操作")])]),t._v(" "),s("h4",{attrs:{id:"_1-4-1-区间修改-单点查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-区间修改-单点查询"}},[t._v("#")]),t._v(" 1.4.1.区间修改，单点查询")]),t._v(" "),s("p",[t._v("（5分钟）")]),t._v(" "),s("p",[t._v("（6分20）")]),t._v(" "),s("h4",{attrs:{id:"_1-4-2-数组→树状数组→前缀区间维护→和、异或和、最大值、最小值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-数组→树状数组→前缀区间维护→和、异或和、最大值、最小值"}},[t._v("#")]),t._v(" 1.4.2.数组→树状数组→前缀区间维护→和、异或和、最大值、最小值")]),t._v(" "),s("p",[t._v("对于一个序列我们可以根据其建立一个树状数组去维护其"),s("strong",[t._v("前缀区间")]),t._v("\n注意：\n其维护的值不只有和。\n异或和，最大值，最小值等。")]),t._v(" "),s("h4",{attrs:{id:"_1-4-3-而对于区间修改-区间查询这样复杂的区间操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-而对于区间修改-区间查询这样复杂的区间操作"}},[t._v("#")]),t._v(" 1.4.3.而对于区间修改，区间查询这样复杂的区间操作")]),t._v(" "),s("p",[t._v("复杂区间问题，使用树状数组就不是很方便了。\n我们可以转而使用**扩展性更强的“线段树”**来进行区间维护。")]),t._v(" "),s("h3",{attrs:{id:"_1-5-总结与代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-总结与代码"}},[t._v("#")]),t._v(" 1.5.总结与代码")]),t._v(" "),s("ul",[s("li",[t._v("代码总结")])]),t._v(" "),s("h2",{attrs:{id:"_2-线段树⭐️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线段树⭐️"}},[t._v("#")]),t._v(" 2.线段树⭐️")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cb411t7AM",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考B站传送门"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("假设，我现在拿到了一个非常非常大的数组，对于这个数组里面的数字呢，我们需要反反复复的不断进行两个操。")])]),t._v(" "),s("li",[s("p",[t._v("（1）query，不断的随机选一块区间，要求把这个区间里面的所有数字都加起来。")])]),t._v(" "),s("li",[s("p",[t._v("（2）update，不断的修改这个数组里面的某一个值。")])])]),t._v(" "),s("p",[t._v("将query从$O(n)$降低到$O(1)$，用"),s("strong",[t._v("前缀和数组")]),t._v("（sum_arr）prefix")]),t._v(" "),s("ul",[s("li",[t._v("优点：query从$O(n)$降低到$O(1)$，")]),t._v(" "),s("li",[t._v("缺点：update从从$O(1)$升到$O(n)$，\n所以，如果我的query和update非常多的话，不论我用什么方法，总体的速度都不会特别的快。")])]),t._v(" "),s("p",[t._v("我们讨论的线段树，可以稍微把这两个操作的速度平均一下，使得两者的时间都落在$O(logn)$上面\n从而，增加整个算法的效率。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-线段树的基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-线段树的基本概念"}},[t._v("#")]),t._v(" 2.1.线段树的基本概念")]),t._v(" "),s("ul",[s("li",[t._v("1、线段树是树")]),t._v(" "),s("li",[t._v("2、根上的数字表示：整个数组一直从0到最后一个数字，这段区间加起来等于多少，比如"),s("code",[t._v("[0,n-1]")]),t._v("区间")]),t._v(" "),s("li",[t._v("3、根的左边和右边子节点分别表示：")]),t._v(" "),s("li",[t._v("左边："),s("code",[t._v("[left , (left+right)/2 ]")]),t._v("（注意是C语言中的整除）")]),t._v(" "),s("li",[t._v("右边："),s("code",[t._v("[(left+right)/2+1 , right ]")])]),t._v(" "),s("li",[t._v("4、比如，根节点为"),s("code",[t._v("[0 , 2]")]),t._v("，那么左边子树"),s("code",[t._v("[0 ,1 ]")]),t._v("，右边是"),s("code",[t._v("[2 , 2]")]),t._v("也就是"),s("code",[t._v("[2]")])]),t._v(" "),s("li",[t._v("5、所有叶子节点，正好都是这个数组中单个元素的数字。")])]),t._v(" "),s("h4",{attrs:{id:"_2-1-1-查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-查询"}},[t._v("#")]),t._v(" 2.1.1.查询")]),t._v(" "),s("h4",{attrs:{id:"_2-1-2-更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-更新"}},[t._v("#")]),t._v(" 2.1.2.更新")]),t._v(" "),s("p",[t._v("先查询到，然后从下往上进行更新。")]),t._v(" "),s("h4",{attrs:{id:"_2-1-3-存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-存储结构"}},[t._v("#")]),t._v(" 2.1.3.存储结构")]),t._v(" "),s("p",[t._v("用近似的完全二叉树，用“虚点”")]),t._v(" "),s("ul",[s("li",[t._v("线段树01")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E7%BA%BF%E6%AE%B5%E6%A0%9101.png",alt:"线段树01"}})]),t._v(" "),s("ul",[s("li",[t._v("线段树02")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E7%BA%BF%E6%AE%B5%E6%A0%9102.png",alt:"线段树02"}})]),t._v(" "),s("p",[t._v("如上图，这样的“静态存储”方式，显然容易用类似于“堆排序”的方式控制")]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("left_node=2*node+1\nright_node=2*node+2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("tree数组：我们现在给tree的下标都加上node\narr数组：所有不写node的start、end、L、R都是arr数组的下标")]),t._v(" "),s("p",[t._v("自己在做的时候，大家一个个计算一下树大概需要多少节点。")]),t._v(" "),s("h4",{attrs:{id:"_2-1-4-递归代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-递归代码"}},[t._v("#")]),t._v(" 2.1.4.递归代码")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" MAX_LEN"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//node为tree的节点，L到R是要建立的范围 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//end也行")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//由于是递归，所以我们要准备一个出口。")]),t._v("\n\t \n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("left_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("right_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\ttree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改arr[idx]=val，然后导致分支也要修改 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tarr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\ttree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//落在左分支 ")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" idx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" idx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("mid "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("left_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("right_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("idx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新 ")]),t._v("\n\ttree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不在计算范围之内，返回0")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" R"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("R "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//减枝 ")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要分割区间")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right_node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum_left"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("left_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum_right"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("right_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("R"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum_left"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("sum_right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_LEN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0表示根节点 ")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\tfor(int i=0; i<15;++i)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\t{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\t\tcout<<tree[i]<<endl;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\t}")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query_tree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br"),s("span",{staticClass:"line-number"},[t._v("63")]),s("br"),s("span",{staticClass:"line-number"},[t._v("64")]),s("br"),s("span",{staticClass:"line-number"},[t._v("65")]),s("br"),s("span",{staticClass:"line-number"},[t._v("66")]),s("br"),s("span",{staticClass:"line-number"},[t._v("67")]),s("br"),s("span",{staticClass:"line-number"},[t._v("68")]),s("br"),s("span",{staticClass:"line-number"},[t._v("69")]),s("br"),s("span",{staticClass:"line-number"},[t._v("70")]),s("br"),s("span",{staticClass:"line-number"},[t._v("71")]),s("br"),s("span",{staticClass:"line-number"},[t._v("72")]),s("br"),s("span",{staticClass:"line-number"},[t._v("73")]),s("br"),s("span",{staticClass:"line-number"},[t._v("74")]),s("br"),s("span",{staticClass:"line-number"},[t._v("75")]),s("br"),s("span",{staticClass:"line-number"},[t._v("76")]),s("br"),s("span",{staticClass:"line-number"},[t._v("77")]),s("br"),s("span",{staticClass:"line-number"},[t._v("78")]),s("br"),s("span",{staticClass:"line-number"},[t._v("79")]),s("br"),s("span",{staticClass:"line-number"},[t._v("80")]),s("br"),s("span",{staticClass:"line-number"},[t._v("81")]),s("br"),s("span",{staticClass:"line-number"},[t._v("82")]),s("br"),s("span",{staticClass:"line-number"},[t._v("83")]),s("br"),s("span",{staticClass:"line-number"},[t._v("84")]),s("br"),s("span",{staticClass:"line-number"},[t._v("85")]),s("br"),s("span",{staticClass:"line-number"},[t._v("86")]),s("br"),s("span",{staticClass:"line-number"},[t._v("87")]),s("br"),s("span",{staticClass:"line-number"},[t._v("88")]),s("br"),s("span",{staticClass:"line-number"},[t._v("89")]),s("br"),s("span",{staticClass:"line-number"},[t._v("90")]),s("br"),s("span",{staticClass:"line-number"},[t._v("91")]),s("br"),s("span",{staticClass:"line-number"},[t._v("92")]),s("br"),s("span",{staticClass:"line-number"},[t._v("93")]),s("br"),s("span",{staticClass:"line-number"},[t._v("94")]),s("br"),s("span",{staticClass:"line-number"},[t._v("95")]),s("br"),s("span",{staticClass:"line-number"},[t._v("96")]),s("br"),s("span",{staticClass:"line-number"},[t._v("97")]),s("br"),s("span",{staticClass:"line-number"},[t._v("98")]),s("br"),s("span",{staticClass:"line-number"},[t._v("99")]),s("br"),s("span",{staticClass:"line-number"},[t._v("100")]),s("br"),s("span",{staticClass:"line-number"},[t._v("101")]),s("br"),s("span",{staticClass:"line-number"},[t._v("102")]),s("br"),s("span",{staticClass:"line-number"},[t._v("103")]),s("br"),s("span",{staticClass:"line-number"},[t._v("104")]),s("br"),s("span",{staticClass:"line-number"},[t._v("105")]),s("br"),s("span",{staticClass:"line-number"},[t._v("106")]),s("br"),s("span",{staticClass:"line-number"},[t._v("107")]),s("br"),s("span",{staticClass:"line-number"},[t._v("108")]),s("br"),s("span",{staticClass:"line-number"},[t._v("109")]),s("br"),s("span",{staticClass:"line-number"},[t._v("110")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1xE411W7Vn",target:"_blank",rel:"noopener noreferrer"}},[t._v("B站传送门"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("这应该是全网"),s("strong",[t._v("二维线段树")]),t._v("讲的最好的了，兹磁up")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-一维线段树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-一维线段树"}},[t._v("#")]),t._v(" 2.2.一维线段树")]),t._v(" "),s("ul",[s("li",[t._v("前置知识：递归，基本二叉树")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("让我们想一个问题\nluogu P3372【模板】线段树1\n如题，已知一个数列，你需要进行下面两种操作将某区间每一个数加上k\n求出某区间每一个数的和\n70%: 1 ≤ n ≤ 10^3，1 ≤ m s 10^4\n100%: 1 s n,m ≤ 10^5\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("ul",[s("li",[t._v("暴力做法\n时间复杂度$o(nm)$显然爆炸\n需要$o(mlogn)$的做法")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-需要线段树-一维线段树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-需要线段树-一维线段树"}},[t._v("#")]),t._v(" 2.2.1.需要线段树(一维线段树)")]),t._v(" "),s("p",[t._v("思路：")]),t._v(" "),s("ul",[s("li",[t._v("我们不想一—枚举每一个元素")]),t._v(" "),s("li",[t._v("我们希望存储区间信息(维护区间,而非单点)\n如图，这样，在线段树中，"),s("strong",[t._v("每一个节点都维护了一个区间")]),t._v("。")]),t._v(" "),s("li",[t._v("线段树是一棵二叉树，叶子节点是数列元素")]),t._v(" "),s("li",[t._v("二分法")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-2-一些变量的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-一些变量的定义"}},[t._v("#")]),t._v(" 2.2.2.一些变量的定义")]),t._v(" "),s("p",[t._v("o:当前节点\nlson (lson=o"),s("em",[t._v("2):左儿子\nrson (rson=o")]),t._v("2+1):右儿子\n这些都是二叉树的性质\nmid ((1+r)/2):区间中点，左边是左儿子的区间，右边是右儿子的区间")]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-基本操作1-上推update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-基本操作1-上推update"}},[t._v("#")]),t._v(" 2.2.3.基本操作1:上推update")]),t._v(" "),s("p",[t._v("在线段树中，我们希望父亲节点存储两个儿子节点的区间信息\n这就需要用两个儿子的信息去更新父亲的信息这个操作就是上推update")]),t._v(" "),s("p",[t._v("上推的部分代码如下：")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("segtree")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线段树")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//区间和，区间最大值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100005")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//空间需要开元素个数的4倍,开4倍是为了给上边的根、父亲节点预留空间。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新当前节点的信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h4",{attrs:{id:"_2-2-4-基本操作2-询问query"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-基本操作2-询问query"}},[t._v("#")]),t._v(" 2.2.4.基本操作2:询问query")]),t._v(" "),s("p",[t._v("对于线段树的题目来说，每个题目都会有询问。")]),t._v(" "),s("p",[t._v("每一次询问，我们只需要访问到完全包含在询问区间里的节点即可\n每一次询问，访问最多logn个节点\n时间复杂度O( logn)")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//o:当前节点， l,r:对应区间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[1,r]内对应询问区间的和,注意，这是减枝用的。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("q1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果询问区间包含当前区间，直接返回")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下面是不包含的情况")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果询问区间在左儿子有，就把左儿子内对应区间和加上")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tres "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \tres "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("h4",{attrs:{id:"_2-2-5-基本操作3-修改modify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-基本操作3-修改modify"}},[t._v("#")]),t._v(" 2.2.5.基本操作3:修改modify")]),t._v(" "),s("ul",[s("li",[t._v("我们需要对叶子节点修改")]),t._v(" "),s("li",[t._v("所以==(暂时）==不能向修改一样访问logn个节点，或者说，我们只能单点修改")]),t._v(" "),s("li",[t._v("但是我们发现一个性质:只要我们不访问这个节点，它是什么值与我们无关")]),t._v(" "),s("li",[t._v("换句话说，访问到了，我们再去修改也不迟")]),t._v(" "),s("li",[t._v("所以我们引入一个新概念︰"),s("strong",[t._v("懒标记1azytag")]),t._v(" "),s("strong",[t._v("懒惰标记")])])]),t._v(" "),s("p",[t._v("懒惰标记是线段树里面的一个难点！！")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在修改时，与询问一样，我们只需要访问到完全包含在询问区间里的节点即可")])]),t._v(" "),s("li",[s("p",[t._v("然后我们在此节点上打上懒标记\n如何打“懒惰标记”呢？比如，你要修改的值是2，那么你把这个节点懒标记，并且加上2就可以了。")])]),t._v(" "),s("li",[s("p",[t._v("如果要递归访问它的左右儿子，则要先把懒标记下传\n因为，如果询问的话，你不把懒标记下传，那你的左右儿子的信息没有更新，如果这个时候询问，那么答案就是错误的！")])]),t._v(" "),s("li",[s("p",[t._v("形象的说：父亲更新儿子。")])]),t._v(" "),s("li",[s("p",[t._v("这样,"),s("strong",[t._v("修改")]),t._v("操作就可以像"),s("strong",[t._v("询问")]),t._v("一样只访问$logn$个节点了")])])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("懒标记下传pushdown\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下传")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意：在修改和询问中都需要有下传操作")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果打上了懒标记")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//懒标记*区间大小，用乘法分配率")]),t._v("\n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新左右儿子的区间信息")]),t._v("\n        \n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下传左右儿子的懒标记，可以继续下传")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下传完了，自己的懒标记要清零")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("修改函数")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("modify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("ql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改当前节点区间信息")]),t._v("\n        dat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("laz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新懒标记，为了下传")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下传")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("modify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" lson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("modify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("qr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//因为有修改,注意要上推")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h4",{attrs:{id:"_2-2-6-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-代码"}},[t._v("#")]),t._v(" 2.2.6.代码")]),t._v(" "),s("p",[t._v("例题")]),t._v(" "),s("ul",[s("li",[t._v("luogu P3373【模板】线段树2（懒标记的优先级)这个题目，需要打2个懒惰标记")]),t._v(" "),s("li",[t._v("luogu SP1716 6SS3-Can you answer these queries III(最大子段和问题)")]),t._v(" "),s("li",[t._v("luogu SP2713 GSS4-can you answer these queries IV")]),t._v(" "),s("li",[t._v("luogu P4243 [3SoI2009]等差数列")])]),t._v(" "),s("h3",{attrs:{id:"_2-3-二维线段树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-二维线段树"}},[t._v("#")]),t._v(" 2.3.二维线段树")]),t._v(" "),s("ul",[s("li",[t._v("前置知识:—维线段树")]),t._v(" "),s("li",[t._v("一维线段树可以处理"),s("strong",[t._v("数列")]),t._v("上的区间问题，那么二维线段树就可以处理"),s("strong",[t._v("矩阵")]),t._v("和"),s("strong",[t._v("子矩阵")]),t._v("的问题")])]),t._v(" "),s("p",[t._v("数列——一维\n矩阵——二维")]),t._v(" "),s("p",[t._v("实现方法")]),t._v(" "),s("ul",[s("li",[t._v("四分法")])]),t._v(" "),s("p",[t._v("容易知道：一个线段——1分为2\n一个矩阵，把每条边，1分为2，也就是分成4份了")]),t._v(" "),s("ul",[s("li",[t._v("实现方法\n一个节点有4个儿子，每个儿子节点处理的是父亲矩阵的一个"),s("strong",[t._v("象限")]),t._v("\n每一次递归儿子节点时，需要把大矩阵的长和宽都一分为二，这样才能分成4份\n二维线段树依然支持懒标记（下传操作)\n让我们来敲代码\n==没有找到模板题==\n大家可以先按暂停，自己试试")])]),t._v(" "),s("p",[s("strong",[t._v("29分钟的时候的代码——51min")])]),t._v(" "),s("p",[t._v("PS：此外，二维线段树还有另一种实现方法：\n树套树实现！")]),t._v(" "),s("ul",[s("li",[t._v("但是树套树非常麻烦，而且在多维线段树里面，“树套树”一般用不了，不然码量巨大。")]),t._v(" "),s("li",[t._v("还是“四份法”更加简单易懂。\n这种做法相较于四分法更加麻烦，所以在这里就不讲了感兴趣的可以自己学一学\n例题\nluogu P4054luogu P3437luogu P3688")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("多维线段树\n三维线段树:八分法\n四维线段树: 十六分法\n一般不会考，一般就考到二维\n因为2维，码量已经这么大了。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"_3-主席树⭐️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-主席树⭐️"}},[t._v("#")]),t._v(" 3.主席树⭐️")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1Vs411B7Da?from=search&seid=2203330248004294975",target:"_blank",rel:"noopener noreferrer"}},[t._v("B站传送门"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"_3-1-主席树基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-主席树基础"}},[t._v("#")]),t._v(" 3.1.主席树基础")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、主席树——实际上是一个"),s("strong",[t._v("可持久化线段树")])])]),t._v(" "),s("li",[s("p",[t._v("2、什么叫“可持久”的呢？就是特别坚持，它可以保存你的历史版本，")])]),t._v(" "),s("li",[s("p",[t._v("比如说，有的题，要求你回到第K个操作啥的")])]),t._v(" "),s("li",[s("p",[t._v("3、主席树还是“线段树”，所以前置知识点是会写线段树。")])]),t._v(" "),s("li",[s("p",[t._v("4、主席树的目的就是保持它（线段树）的历史版本")])]),t._v(" "),s("li",[s("p",[t._v("简单做法：给每个历史版本都开一个线段树对不对？空间可能会炸")])]),t._v(" "),s("li",[s("p",[t._v("主席树，是一种升级，人们通过观察发现，每次单点修改，只会修改一条链的信息。（只会有入若干个节点被修改），那我们为什么要重新建树呢？我们只需把这3个节点重新建一遍就好了。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-为什么叫-主席树-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-为什么叫-主席树-呢"}},[t._v("#")]),t._v(" 3.2.为什么叫“主席树”呢？")]),t._v(" "),s("ul",[s("li",[t._v("发明人：黄嘉泰，由于这3个字的首字母的缩写（HJT），同“主席”名，简写碰巧一致")])]),t._v(" "),s("p",[t._v("时间：2.43")]),t._v(" "),s("p",[t._v("title: 主席树\ndate: 2020-12-16")]),t._v(" "),s("h2",{attrs:{id:"_4-设计跳表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-设计跳表"}},[t._v("#")]),t._v(" 4.设计跳表")]),t._v(" "),s("p",[t._v("看Redis和kafka的时候会接触到“跳表”")]),t._v(" "),s("h3",{attrs:{id:"_4-1-跳表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-跳表"}},[t._v("#")]),t._v(" 4.1.跳表")]),t._v(" "),s("p",[t._v("为了改善链表的查询时间复杂度。")]),t._v(" "),s("p",[t._v("添加“索引”")]),t._v(" "),s("ul",[s("li",[t._v("一般来说上层节点个数应该是下层节点个数的"),s("strong",[t._v("二分之一")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-添加节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-添加节点"}},[t._v("#")]),t._v(" 4.2.添加节点")]),t._v(" "),s("p",[t._v("添加到上一层的概率是二分之一之最简单的方武就是抛奥市")]),t._v(" "),s("p",[t._v("所以我们让他在O和1之间随机如果是O就停止")]),t._v(" "),s("p",[t._v("如果是1就继续")]),t._v(" "),s("p",[t._v("最后正面础现的次数k，就代表我们要需要在第一层到k层之阃添加索引")]),t._v(" "),s("p",[t._v("当然我们也不能能止他限增长")]),t._v(" "),s("p",[t._v("所我们还需要加一个最大值的限制的")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRandom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Random random "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextBoolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("MAX_LEVEL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h2",{attrs:{id:"_6-字符串string匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-字符串string匹配"}},[t._v("#")]),t._v(" 6.字符串string匹配")]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("——突破深信服字符串匹配——\n字符串匹配暴力和hash优化\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[s("font",{attrs:{face:"楷体",color:"red"}},[t._v("单模式串匹配算法")]),t._v(" "),s("ul",[s("li",[t._v("也就是一个串和一个串进行匹配")])])],1),t._v(" "),s("li",[s("b",[t._v("BF算法")]),t._v("（Brute Force 的缩写，也叫暴力匹配算法，朴素匹配算法)")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("Brute adj. 蛮干不动脑筋的")])])]),t._v(" "),s("ul",[s("li",[s("b",[t._v("RK算法")]),t._v("（Rabin-Karp 算法）")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("由它的两位发明者 Rabin 和 Karp 的名字来命名的")])])]),t._v(" "),s("ul",[s("li",[s("b",[t._v("BM算法")]),t._v("（Boyer-Moore 算法）")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("它是一种非常高效的字符串匹配算法，有实验统计，它的性能是著名的KMP 算法的3到4倍。")])])]),t._v(" "),s("ul",[s("li",[s("b",[t._v("KMP算法")])]),t._v(" "),s("li",[s("font",{attrs:{face:"楷体",color:"red"}},[t._v("多模式串匹配算法")]),t._v(" "),s("ul",[s("li",[t._v("是在一个串中同时查找多个串")])])],1),t._v(" "),s("li",[s("b",[t._v("Trie树")]),t._v("，（又称前缀树，字典树，单词查找树）")]),t._v(" "),s("li",[t._v('Trie这个术语来自于retrieval根据词源学, trie的发明者Edward Fredkin把它读作/\'tri:/ "tree"。但是 ,其他作者把它读作/\'tra1/ "try"。')]),t._v(" "),s("li",[s("b",[t._v("AC自动机算法")]),t._v("（Aho–Corasick算法）是由Alfred V.Aho和Margaret J.Corasick 发明的")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("其实，Trie树跟AC自动机之间的关系，就像单模式串匹配中朴素的串匹配算法，跟KMP 算法之间的关系一样，只不过前者针对的是多模式串而已。所以，AC自动机实际上就是在Trie树之上，加了类似KMP的next数组，只不过此处的next数组是构建在树上罢了。")])])]),t._v(" "),s("h3",{attrs:{id:"_7-1-bf算法『暴力』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-bf算法『暴力』"}},[t._v("#")]),t._v(" 7.1.BF算法『暴力』")]),t._v(" "),s("p",[t._v("一顿暴力，直接贴代码")]),t._v(" "),s("p",[t._v("//指针做输入，const修饰避免改动。")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("text "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*in*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pattern "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*in*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//非法输入")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//位置 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//text回溯 ")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//pattern回溯 ")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//已经匹配字符长度")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("pos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配失败    ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br")])]),s("p",[t._v("分析BF算法：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("时间复杂度$O(n*m)$")]),t._v(" "),s("li",[t._v("空间复杂度$O(1)$")])])]),t._v(" "),s("p",[t._v("其他补充：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("尽管理论上，BF算法的时间复杂度很高，但在实际的开发中，它却是一个比较常用的字符串匹配算法：")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("1.实际的软件开发中，大部分情况下，模式串和主串的长度都不会太长。而且每次模式串与主串中的子串匹配的时候，当中途遇到不能匹配的字符的时候，就可以就停止了，不需要把m个字符都比对一下。所以，尽管理论上的最坏情况时间复杂度大，但是，统计意义上，大部分情况下，算法执行效率要比这个高很多。")]),t._v(" "),s("li",[t._v("2.BF算法思想简单，代码实现也非常简单。简单意味着不容易出错，如果有bug 也容易暴露和修复。"),s("b",[t._v("在工程中，在满足性能要求的前提下，简单是首选。")]),t._v("这也是我们常说的"),s("b",[t._v("KISS（Keep it Simple and Stupid）设计原则")]),t._v("。所以，在实际的软件开发中，绝大部分情况下，BF算法就够用了")])])])]),t._v(" "),s("h3",{attrs:{id:"_7-2-rk算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-rk算法"}},[t._v("#")]),t._v(" 7.2.RK算法")]),t._v(" "),s("ul",[s("li",[t._v("BF算法缺陷：在整个执行过程中,某些轮的比较没有意义，但BF算法还是老老实实地让模式串一位一位挪动。")]),t._v(" "),s("li",[t._v("RK算法：为了克服这个缺陷BF，干脆回避了字符的直接比较，改为比较两个字符串的哈希值。但这样做可能产生哈希冲突，性能并不稳定。")])]),t._v(" "),s("p",[s("b",[t._v("联系")]),t._v("：RK算法是BF算法的改进，它巧妙借助了我们前面讲过的哈希算法，引入"),s("font",{attrs:{face:"楷体",color:"red"}},[t._v("哈希算法")]),t._v("，时间复杂度立刻就会降低。\n"),s("b",[t._v("难点")]),t._v("：设计一个可以应对各种类型字符的哈希算法并不简单")],1),t._v(" "),s("p",[s("b",[t._v("思路")]),t._v(":我们通过哈希算法对主串中的n-m+1个子串分别求哈希值，然后逐个与模式串的哈希值比较大小。如果某个子串的哈希值与模式串相等，那就说明对应的子串和模式串匹配了（当然我们需要考虑哈希冲突的问题）。比较哈希值是非常快速的，所以效率提高了。\n不过这又"),s("b",[t._v("引入一个问题")]),t._v("：通过哈希算法计算子串的哈希值的时候，我们需要遍历子串中的每个字符。尽管模式串与子串比较的效率提高了，但是，算法整体的效率并没有提高。有没有方法可以提高哈希算法计算子串哈希值的效率？\n"),s("b",[t._v("哈希算法设计技巧")]),t._v("：我们假设要匹配的字符串的字符集中只包含K个字符，我们可以用一个K进制数来表示一个子串，这个K进制数转化成十进制数，作为子串的哈希值。")]),t._v(" "),s("p",[s("b",[t._v("没有冲突的哈希")]),t._v("：我们只需要比较一下模式串和子串的哈希值\n"),s("b",[t._v("有冲突的哈希")]),t._v("：当存在哈希冲突的时候，有可能存在这样的情况，子串和模式串的哈希值虽然是相同的，但是两者本身并不匹配。解决方法很简单。当我们发现一个子串的哈希值跟模式串的哈希值相等的时候，我们只\n需要再对比一下子串和模式串本身就好了。\n当然，如果子串的哈希值与模式串的哈希值不相等，那对应的子串和模式串肯定也是不匹配的，就不需要比对子串和模式串本身了。")]),t._v(" "),s("p",[t._v("总结：哈希算法的冲突概率要相对控制得低一些，如果存在大量冲突，就会导致 RK 算法的时间\n复杂度退化，效率下降。极端情况下，如果存在大量的冲突，每次都要再对比子串和模式串本\n身，那时间复杂度就会退化成$O(n*m)$")]),t._v(" "),s("p",[s("b",[t._v("但一般情况下，冲突不会很多，RK 算法的效率还是比 BF 算法高的")])]),t._v(" "),s("h3",{attrs:{id:"_7-3-horspool算法-低配版的bm算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-horspool算法-低配版的bm算法"}},[t._v("#")]),t._v(" 7.3.Horspool算法（低配版的BM算法）")]),t._v(" "),s("ul",[s("li",[t._v("参考自：潘彦，《算法设计与分析基础》第3版")])]),t._v(" "),s("blockquote",[s("p",[t._v("移动表，可以理解为坏字符")])]),t._v(" "),s("h3",{attrs:{id:"_7-3-bm-boyer-moore-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-bm-boyer-moore-算法"}},[t._v("#")]),t._v(" 7.3.BM（"),s("code",[t._v("Boyer Moore")]),t._v("）算法")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-strstr/",target:"_blank",rel:"noopener noreferrer"}},[t._v("28. 实现 strStr()"),s("OutboundLink")],1),t._v("「使用BM算法」")])]),t._v(" "),s("li",[s("p",[t._v("阮一峰的"),s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BM算法讲解角度"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("BM算法：则是想，那么我们能否仍然采用字符比较的思路，并且尽量减少无谓的比较呢?BM算法，本质上其实就是在"),s("b",[t._v("寻找一种规律")]),t._v("。借助这种规律，在模式串与主串匹配的过程中，当模式串和主串某个字符串匹配的时候，能够"),s("b",[t._v("跳过一些肯定不会匹配的情况")]),t._v("，将模式串往后多滑动几位。")])])]),t._v(" "),s("p",[t._v("为了减少无谓的比较，BM算法制定了两条规则：")]),t._v(" "),s("ul",[s("li",[s("b",[t._v("坏字符规则")]),t._v("（bad character rule）")])]),t._v(" "),s("p",[t._v("后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置")]),t._v(" "),s("ul",[s("li",[s("b",[t._v("好后缀规则")]),t._v("（good suffix shift）")])]),t._v(" "),s("p",[s("strong",[t._v('"好后缀规则"')]),t._v("：后移位数 = 好后缀的位置 - 搜索词中的上一次出现位置")]),t._v(" "),s("p",[t._v("总结一下规律，好后缀情况下，模式串的移动总体分为了三种情况，")]),t._v(" "),s("blockquote",[s("p",[t._v("一个字符串的后缀子串，就是除了第一个字符的其余子串")]),t._v(" "),s("p",[t._v("一个字符串的前缀子串，就是除了最后一个字符的其余子串，例如 "),s("code",[t._v("a d e f")]),t._v("，它的前缀子串就有 "),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("a d")]),t._v("、"),s("code",[t._v("a d e")]),t._v(" 这三个")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("一是好后缀在模式串中，那么移动模式串至好后缀匹配的地方")])]),t._v(" "),s("li",[s("p",[t._v("二是好后缀不在模式串中，并且好后缀的后缀子串==们==和模式串的前缀子串"),s("strong",[t._v("无重合部分")]),t._v("，那么直接移动模式串至好后缀的后一位")])]),t._v(" "),s("li",[s("p",[t._v("三是好后缀不在模式串中，但是"),s("strong",[t._v("好后缀")]),t._v("的"),s("strong",[t._v("后缀子串==们=="),s("strong",[t._v("和")]),t._v("模式串")]),t._v("的"),s("strong",[t._v("前缀子串")]),t._v("有重合部分，那么需要移动模式串至和好后缀的后缀子串重合的地方")])]),t._v(" "),s("li",[s("p",[t._v("代码参考：https://segmentfault.com/a/1190000022490177")])])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引入一个 int 类型的数组 suffix，长度为模式串的长度")]),t._v("\n\n这里引入一个 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" 类型的数组 suffix，长度为模式串的长度，数组的下标为模式串后缀子串的长度，值为后缀子串在模式串中可匹配的子串的起始下标；然后再引入一个 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" 类型的 prefix 数组，它表示的是模式串的后缀子串是否有可匹配的前缀子串，如果有，则值为 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("。\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 生成好后缀数组\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("goodSuffixRule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" suffix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("suffix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            suffix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("[日]秋叶拓哉 / [日]岩田阳一 / [日]北川宜稔，《"),s("a",{attrs:{href:"https://book.douban.com/subject/24749842/",target:"_blank",rel:"noopener noreferrer"}},[t._v("挑战程序设计竞赛"),s("OutboundLink")],1),t._v("》")]),t._v(" "),s("li",[t._v("labuladong的算法小抄")]),t._v(" "),s("li",[t._v("GitHub，机试技巧与STL")]),t._v(" "),s("li",[t._v("柳婼，《从放弃C语⾔到使⽤C++刷算法的简明教程》")]),t._v(" "),s("li",[t._v("潘彦，《算法设计与分析基础》第3版")])])])}),[],!1,null,null,null);s.default=r.exports}}]);