(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{460:function(v,_,t){"use strict";t.r(_);var s=t(14),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"面经复盘"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面经复盘"}},[v._v("#")]),v._v(" 面经复盘")]),v._v(" "),_("h2",{attrs:{id:"c-堆栈的区别-为什么堆会有内存碎片-为什么栈比堆运行快"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-堆栈的区别-为什么堆会有内存碎片-为什么栈比堆运行快"}},[v._v("#")]),v._v(" C++堆栈的区别，为什么堆会有内存碎片，为什么栈比堆运行快？")]),v._v(" "),_("p",[v._v("​\t栈区不会产生碎片，因为分配栈内存的时候，是排序的，是先进后出的。堆区会产生碎片，因为堆区"),_("strong",[v._v("分配内存的方式")]),v._v("会造成内存空间不连续")]),v._v(" "),_("p",[v._v("​\t分配方式不同；堆区内存只有动态分配，栈区内存可以分为静态分配和动态分配，局部变量的创建，就是"),_("strong",[v._v("静态")]),v._v("分配，栈区的"),_("strong",[v._v("动态")]),v._v("分配和堆区的动态分配不同，不同点是栈区的动态分配后是由系统自动释放，而堆区动态分配的内存有程序员手动释放")]),v._v(" "),_("p",[v._v("​\t栈是机器系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是 C/C++ 函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会"),_("strong",[v._v("按照一定的算法")]),v._v("（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。")]),v._v(" "),_("p",[v._v("​\t链接：https://juejin.cn/post/6909515629246545927")]),v._v(" "),_("h3",{attrs:{id:"面试官说有四种内存对齐-你说了一种"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面试官说有四种内存对齐-你说了一种"}},[v._v("#")]),v._v(" 面试官说有四种内存对齐，你说了一种")]),v._v(" "),_("p",[v._v("四种内存对齐是："),_("strong",[v._v("字节对齐")]),v._v("、"),_("strong",[v._v("字对齐")]),v._v("、"),_("strong",[v._v("双字对齐")]),v._v("和"),_("strong",[v._v("四字对齐")]),v._v("。")]),v._v(" "),_("p",[v._v("字节对齐是指将数据存储在内存中时，"),_("strong",[v._v("每个字节")]),v._v("都放在内存地址的整数倍位置上，以便更快地访问。")]),v._v(" "),_("p",[v._v("字对齐是指将数据存储在内存中时，**每个字（一个字等于4个字节）**都放在内存地址的4的倍数位置上，以便更快地访问。")]),v._v(" "),_("p",[v._v("双字对齐是指将数据存储在内存中时，**每个双字（一个双字等于8个字节）**都放在内存地址的8的倍数位置上，以便更快地访问。")]),v._v(" "),_("p",[v._v("四字对齐是指将数据存储在内存中时，**每个四字（一个四字等于16个字节）**都放在内存地址的16的倍数位置上，以便更快地访问。")]),v._v(" "),_("h4",{attrs:{id:"给定一个每行是一个数字-uint64-的文件-大小80g-给定一台内存8g的机器-如何统计出现-次数最多-的数字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#给定一个每行是一个数字-uint64-的文件-大小80g-给定一台内存8g的机器-如何统计出现-次数最多-的数字"}},[v._v("#")]),v._v(" 给定一个每行是一个数字 (uint64）的文件，大小80G，给定一台内存8G的机器，如何统计出现==次数最多==的数字")]),v._v(" "),_("p",[v._v("​\t对于这种情况，最简单的方法是使用基数排序（Radix Sort）。它是一种非比较排序算法，可以在线性时间内完成排序。基数排序的基本思想是：将数据按照位数分组，然后从低位开始，每次比较每组中的数字，将其分到不同的桶中，最后将桶中的数字按照顺序输出")]),v._v(" "),_("p",[v._v("​\t对于这个问题，可以使用外排序的方法来解决。首先，将文件分成多个小文件，每个文件的大小不超过内存大小，然后对每个小文件进行排序，最后将排序后的小文件合并，得到最终的排序结果。最后，遍历排序后的文件，统计每个数字出现的次数，即可得到出现次数最多的数字。")]),v._v(" "),_("p",[v._v("具体地，可以按照以下步骤操作：")]),v._v(" "),_("ol",[_("li",[v._v("将大文件分割成多个小文件，每个小文件的大小不超过内存大小（例如，每个小文件的大小为1GB），并将它们存储在硬盘上。")]),v._v(" "),_("li",[v._v("读入一个小文件，将其中的数字读入内存中，并使用一种高效的排序算法（例如快速排序）进行排序。")]),v._v(" "),_("li",[v._v("将排序后的结果写入一个临时文件中。这个临时文件中的每一行应该包含一个数字和这个数字出现的次数，例如“12345 10”表示数字12345在这个小文件中出现了10次。")]),v._v(" "),_("li",[v._v("重复步骤2和3，对每个小文件进行排序并将结果写入临时文件中。")]),v._v(" "),_("li",[v._v("将所有的临时文件合并成一个大文件，然后对这个大文件进行排序，排序规则是按照数字出现的次数从大到小排序。可以使用归并排序等高效的排序算法来完成这个任务。")]),v._v(" "),_("li",[v._v("最后，遍历排序后的文件，==统计每个数字出现的次数==，即可得到出现次数最多的数字。")])]),v._v(" "),_("p",[v._v("需要注意的是，在步骤2和3中，我们需要使用一种高效的算法来统计数字出现的次数。可以使用哈希表等数据结构来完成这个任务。")]),v._v(" "),_("p",[v._v("另外，在步骤5中，我们可以使用外部排序算法（例如归并排序）来对大文件进行排序。在这个过程中，我们可以使用归并排序的技巧来减少内存的使用，例如使用归并排序的缓存技巧和多路归并技巧来处理大文件。")])])}),[],!1,null,null,null);_.default=r.exports}}]);