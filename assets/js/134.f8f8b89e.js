(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{416:function(t,_,v){"use strict";v.r(_);var s=v(14),a=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"uml图分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#uml图分类"}},[t._v("#")]),t._v(" UML图分类")]),t._v(" "),_("div",{staticClass:"language-txt line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-txt"}},[_("code",[t._v("UML系列文章（一）\n2020-07-01  \n\n\n\nsummary: 静态模型图（类图，部署图等）\n2021.08.26.\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br")])]),_("h2",{attrs:{id:"_1-uml图分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-uml图分类"}},[t._v("#")]),t._v(" 1.UML图分类")]),t._v(" "),_("ul",[_("li",[t._v("静态模型图")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("类图（★★★★★）")]),t._v(" "),_("li",[t._v("对象图")]),t._v(" "),_("li",[t._v("包图")]),t._v(" "),_("li",[t._v("组件图")]),t._v(" "),_("li",[t._v("部署图（★★☆）")])])]),t._v(" "),_("ul",[_("li",[t._v("动态模型图")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("用例图（★★★）")]),t._v(" "),_("li",[t._v("时序图（★★★★）")]),t._v(" "),_("li",[t._v("协作图")]),t._v(" "),_("li",[t._v("状态图")]),t._v(" "),_("li",[t._v("活动图")])])]),t._v(" "),_("p",[t._v("动态模型图：\n比如说，有多少个人登录这个系统，有多少个人维护这个系统。")]),t._v(" "),_("h2",{attrs:{id:"_2-uml图的重要性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-uml图的重要性"}},[t._v("#")]),t._v(" 2.UML图的重要性")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("1）其中，类图是学习"),_("b",[t._v("设计模式")]),t._v("的两个重要的东西之一，另外就是语言层面的"),_("b",[t._v("“多态”")]),t._v("，还有就是UML中的"),_("b",[t._v("“关系”")]),t._v("。")]),t._v(" "),_("ul",[_("li",[_("b",[t._v("（因为设计模式的很多类图是用UML的类图来表达的。）")])])])]),t._v(" "),_("li",[_("p",[t._v("2）UML图的，时序图什么的，其实我也可以用于平时作技术交流或者PPT中插图，并不一定仅仅用于项目建模。")])])]),t._v(" "),_("h2",{attrs:{id:"_3-uml图中关系分类-4种和细分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-uml图中关系分类-4种和细分"}},[t._v("#")]),t._v(" 3.UML图中关系分类（4种和细分）")]),t._v(" "),_("p",[t._v("UML中的关系主要包括4种:")]),t._v(" "),_("ul",[_("li",[t._v("1）泛化关系（generalization）:代码层次实现："),_("b",[t._v("继承")]),t._v(">")]),t._v(" "),_("li",[t._v("2）实现关系（realization）：代码层次实现：C++可以用"),_("b",[t._v("纯虚函数")]),t._v("和"),_("b",[t._v("抽象类")]),t._v("来模拟一个接口")]),t._v(" "),_("li",[t._v("3）依赖关系（dependency）:代码层次实现：“一个类是另一个类”的"),_("b",[t._v("函数参数")]),t._v("或"),_("b",[t._v("函数返回值")]),t._v("实现")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("包含关系（"),_("code",[t._v("<<include>>")]),t._v("）")]),t._v(" "),_("li",[t._v("扩展关系（"),_("code",[t._v("<<extend>>")]),t._v("）")])])]),t._v(" "),_("ul",[_("li",[t._v("4）关联关系（association）:代码层面是用“一个类是另外一个类”的"),_("font",{attrs:{size:"4"}},[_("b",[t._v("成员变量")])])],1)]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("一般关联")]),t._v(" "),_("li",[t._v("聚合")]),t._v(" "),_("li",[t._v("组合")])])]),t._v(" "),_("ul",[_("li",[t._v("注意：关系逐渐加强。一般关联--\x3e聚合--\x3e组合")])]),t._v(" "),_("h3",{attrs:{id:"_1-泛化关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛化关系"}},[t._v("#")]),t._v(" （1）泛化关系")]),t._v(" "),_("ul",[_("li",[t._v("意义：在 UML 中, 泛化关系用来表示"),_("font",{attrs:{size:"4"}},[_("b",[t._v("类")])]),t._v("与"),_("font",{attrs:{size:"4"}},[_("b",[t._v("类")])]),t._v(", "),_("font",{attrs:{size:"4"}},[_("b",[t._v("接口")])]),t._v("与"),_("font",{attrs:{size:"4"}},[_("b",[t._v("接口")])]),t._v("之间的继承关系. 泛化关系有时也称为”is a kind of”关系")],1),t._v(" "),_("li",[t._v("图形：在 UML 中泛化关系用一条"),_("strong",[t._v("实线，空心箭头")]),t._v("从子类指向父类")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.01.png",alt:"2021.08.26.01"}})]),t._v(" "),_("h3",{attrs:{id:"_2-实现关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现关系"}},[t._v("#")]),t._v(" （2）实现关系")]),t._v(" "),_("ul",[_("li",[t._v("意义：在 UML 中, 实现关系用来表示"),_("font",{attrs:{size:"4"}},[_("b",[t._v("类")])]),t._v("与"),_("font",{attrs:{size:"4"}},[_("b",[t._v("接口")])]),t._v("之间的实现关系.")],1),t._v(" "),_("li",[t._v("图形：在 UML 中实现关系用一条"),_("strong",[t._v("虚线，空心箭头")]),t._v("由子类指向父类")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.02.png",alt:"2021.08.26.02"}})]),t._v(" "),_("p",[t._v("PS:实现关系，在C++语言里面没有接口这个概念，Java中有。\n但是C++可以用纯虚函数和抽象类来模拟一个接口。\n纯虚函数的类是抽象类。可以用抽象类弄成接口类，就这么干。")]),t._v(" "),_("h3",{attrs:{id:"_3-依赖关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-依赖关系"}},[t._v("#")]),t._v(" （3）依赖关系")]),t._v(" "),_("p",[t._v("对于两个相对独立的系统，当一个系统负责构造另一个系统的实例，或者依赖另一个系统的服务时，这两个系统之间体现为依赖关系.\n例如生产零件的机器和零件，机器负责构造零件对象;充电电池和充电器，充电电池通过充电器来充电;自行车Bicycle和打气筒Pump，自行车通过打气筒来充气")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.03.png",alt:"2021.08.26.03"}})]),t._v(" "),_("h4",{attrs:{id:"依赖关系之包含"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#依赖关系之包含"}},[t._v("#")]),t._v(" 依赖关系之包含")]),t._v(" "),_("ul",[_("li",[t._v("一个用例可以包含其他用例具有的行为, 并把它包含的用例行为作为自身行为的一部分.")]),t._v(" "),_("li",[t._v("图形：在 UML 中包含关系用"),_("strong",[t._v("虚线箭头")]),t._v("加 “"),_("code",[t._v("<<include>>")]),t._v("”,箭头指向"),_("font",{attrs:{size:"4"}},[_("b",[t._v("被包含")])]),t._v("的用例")],1)]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.04.png",alt:"2021.08.26.04"}})]),t._v(" "),_("h4",{attrs:{id:"依赖关系之扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#依赖关系之扩展"}},[t._v("#")]),t._v(" 依赖关系之扩展")]),t._v(" "),_("ul",[_("li",[t._v("如果在完成某个功能的时候偶尔会执行另外一个功能, 则用扩展关系表示.")]),t._v(" "),_("li",[t._v("图形：在 UML 中扩展关系用"),_("strong",[t._v("虚线箭头")]),t._v("加 “"),_("code",[t._v("<<extend>>")]),t._v("”, 箭头指向"),_("font",{attrs:{size:"4"}},[_("b",[t._v("被扩展")])]),t._v("的用例")],1)]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.05.png",alt:"2021.08.26.05"}})]),t._v(" "),_("p",[t._v("说明：在保存成绩的时候，只有发现学生考试没有及格，"),_("font",{attrs:{size:"4"}},[_("b",[t._v("才需要")])]),t._v("扩展到“打印补考通知单”。（偶尔，毕竟并不总是需要打印补考通知单）")],1),t._v(" "),_("h3",{attrs:{id:"_4-关联关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-关联关系"}},[t._v("#")]),t._v(" （4）关联关系")]),t._v(" "),_("p",[t._v("关于依赖是虚线，关联是实现的对比")]),t._v(" "),_("ul",[_("li",[t._v("根据虚线和实线，或许可以这么记忆？\n不是自己的车，这种"),_("strong",[t._v("依赖")]),t._v("别人永远是虚的。是自己买的车，和自己"),_("strong",[t._v("关联")]),t._v("紧密的才是实的。")])]),t._v(" "),_("h4",{attrs:{id:"_1、一般关联-实线"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、一般关联-实线"}},[t._v("#")]),t._v(" 1、一般关联（实线）")]),t._v(" "),_("p",[t._v("张三这次开车上班，车是自己的。")]),t._v(" "),_("ul",[_("li",[t._v("关联关系是类与类之间的联结，它使一个类知道另一个类的属性和方法 ，关联可以是双向的，也可以是单向的。")]),t._v(" "),_("li",[_("font",{attrs:{size:"4"}},[_("b",[t._v("双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。")])])],1),t._v(" "),_("li",[t._v("在 Java和C++ 中，关联关系是通过使用成员变量来实现的。 如人与车")]),t._v(" "),_("li",[t._v("关联：一个类是另一个类的成员变量。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.006.png",alt:"2021.08.26.006"}})]),t._v(" "),_("p",[t._v("代码")]),t._v(" "),_("div",{staticClass:"language-cpp line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-cpp"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Car")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///...")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tCar "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" mycar"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自己有的")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br")])]),_("h4",{attrs:{id:"_2、聚合-空心菱形-实线"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、聚合-空心菱形-实线"}},[t._v("#")]),t._v(" 2、聚合（空心菱形+实线）")]),t._v(" "),_("p",[t._v("也是属于关联，只不过是车和人之间的关系会更加紧密一些而已，")]),t._v(" "),_("ul",[_("li",[t._v("聚合是"),_("strong",[t._v("整体")]),t._v("和"),_("strong",[t._v("部分")]),t._v("之间的关系，例如汽车由引擎、轮胎以及其它零件组成。")])]),t._v(" "),_("p",[t._v("聚合关系也是通过成员变量来实现的。")]),t._v(" "),_("p",[t._v("对比：\n关联关系所涉及的两个类处在同一个层次上\n而聚合关系中，两个类处于不同的层次上，一个代表整体，一个代表部分。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.07.png",alt:"2021.08.26.07"}})]),t._v(" "),_("h4",{attrs:{id:"_3、组合-实心菱形-实线"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、组合-实心菱形-实线"}},[t._v("#")]),t._v(" 3、组合（实心菱形+实线）")]),t._v(" "),_("p",[t._v("聚合和组合的区别：\n有无生命的区别。生命中的整体和部分\n比如,公司和部门，公司不存在了，则部门也没有了。要是部门不存在类，公司也没有存在的意义。")]),t._v(" "),_("ul",[_("li",[t._v("代表整体的对象负责代表部分对象的生命周期（重点理解！！！）")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.08.png",alt:"2021.08.26.08"}})]),t._v(" "),_("p",[_("font",[_("b",[t._v("Tips")])]),t._v(":由于各大UML对这个的支持不同，也可能图片会画成下面这样")],1),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.08_2.0.png",alt:"2021.08.26.08_2.0"}})]),t._v(" "),_("p",[_("font",{attrs:{size:"5"}},[_("b",[t._v("总结：")])]),t._v("\n对于聚合和组合的UML图，那个箭头，我们可以省略也可以不省略，其实，我们主要关注菱形！！！\n这是最奇葩的，菱形是放在尾巴的。")],1),t._v(" "),_("h4",{attrs:{id:"关联关系的多重性-软考考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关联关系的多重性-软考考"}},[t._v("#")]),t._v(" 关联关系的多重性（软考考）")]),t._v(" "),_("p",[t._v("关联还有一个数量问题")]),t._v(" "),_("ul",[_("li",[t._v("关联关系的多重性是指有多少对象可以参与该关联, 多重性可以用来表达一个取值范围, 特定值, 无限定的范围.")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/2021.08.26.number.png",alt:"2021.08.26.number"}})]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("在UML中，多重性可以用下面的格式表示：\n0..1\n0.."),_("em",[t._v("（也可以表示为0..n）\n1（1..1的简写）\n1..")]),t._v("（也可以表示为1..n）\n*（即0..n）\n7\n3,6..9\n0（0..0的简写）（表示没有实例参与关联，一般不用）\n可以看到，多重性是用非负整数的一个子集来表示的。")])])]),t._v(" "),_("p",[t._v("比如这样表示，一个人可以有1,2,3...n辆车")]),t._v(" "),_("p",[t._v("举例：\n前面聚合的例子：\n一个车站可以有1个引擎，4个轮胎")]),t._v(" "),_("h2",{attrs:{id:"_4-软件准备"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-软件准备"}},[t._v("#")]),t._v(" 4.软件准备")]),t._v(" "),_("p",[t._v("1）博客中UML图都将使用"),_("code",[t._v("Start UML")]),t._v("进行编辑\n2）此外，我还常用"),_("code",[t._v("VS2012的建模工具")]),t._v("，里面也有一些常用UML图，详情"),_("a",{attrs:{href:"https://jingyan.baidu.com/article/5d6edee2c9dd2b99ebdeec55.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("可见"),_("OutboundLink")],1),t._v("\n3）当然，还有Rose软件\nJava的话，IEDA还会自动生成类图等")]),t._v(" "),_("h3",{attrs:{id:"_4-1-聚合-和-组合-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-聚合-和-组合-的区别是什么"}},[t._v("#")]),t._v(" 4.1.“聚合”和“组合”的区别是什么？")]),t._v(" "),_("p",[t._v("组合和聚合是有很大区别的，这个区别不是在形式上，而是在本质上：")]),t._v(" "),_("p",[t._v("比如zhiA类中包含B类的一个dao引用b，当A类的一个对象消亡时，b这个引用所指向的对象也同时消亡（没有任何一个引用指向它，成了垃圾对象），这种情况叫做组合，反之b所指向的对象还会有另外的引用指向它，这种情况叫聚合。")]),t._v(" "),_("p",[t._v("在实际写代码时组合方式一般会这样写：\nA类的构造方法里创建B类的对象，也就是说，当A类的一个对象产生时，B类的对象随之产生，当A类的这个对象消亡时，它所包含的B类的对象也随之消亡。\n聚合方式则是这样：\nA类的对象在创建时不会立即创建B类的对象，而是等待一个外界的对象传给它\n传给它的这个对象不是A类创建的。")]),t._v(" "),_("p",[t._v("现实生活中：\n人和人和手，脚是组合关系，因为当人死亡后人的手也就不复存在了。人和他的电脑是聚合关系。 class Hand{ } class Computer{ }")]),t._v(" "),_("p",[t._v("组合： class Person{ private Hand hand; public Person(){ hand = new Hand(); } }")]),t._v(" "),_("p",[t._v("聚合： class Person{ private Computer computer; public setComputer(){ computer = new Computer(); } }")]),t._v(" "),_("p",[t._v("PS:个人觉得人和手那样设计不好\n问：人和他的电脑不是依赖关系吗？\n答：要看你是从那个角度设计的吧，都有可能")]),t._v(" "),_("h2",{attrs:{id:"✅静态模型图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#✅静态模型图"}},[t._v("#")]),t._v(" ✅静态模型图")]),t._v(" "),_("h2",{attrs:{id:"_1-用例图-★★★"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-用例图-★★★"}},[t._v("#")]),t._v(" 1.用例图（★★★）")]),t._v(" "),_("p",[t._v("用例图：\n画出来的，要是画出来之后给别人看，没有很大的歧义就算是可以了。")]),t._v(" "),_("p",[t._v("没有板上钉钉的事情，没有错误之分，只是更加合适一点。")]),t._v(" "),_("h2",{attrs:{id:"_2-类图-★★★★★"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-类图-★★★★★"}},[t._v("#")]),t._v(" 2.类图（★★★★★）")]),t._v(" "),_("p",[t._v("类是类图的主要组件, 由 3 部分组成: 类名, 属性和方法. 在 UML 中, 类用矩形来表示,")]),t._v(" "),_("ul",[_("li",[t._v("顶端部分存放类的名称")]),t._v(" "),_("li",[t._v("中间部分存放类的属性, 属性的类型及值")]),t._v(" "),_("li",[t._v("底部部分存放类的方法, 方法的参数和返回类型")])]),t._v(" "),_("p",[t._v("在 UML 中可以根据实际情况有选择的隐藏属性部分或方法部分或两者都隐藏")]),t._v(" "),_("ul",[_("li",[t._v("在 UML 中, 公用public类型有 + 表示, 私有private类型用 – 表示, protect保护类型用 # 表示.")]),t._v(" "),_("li",[t._v("UML 的工具开发商可以使用自己定义的符号表示不同的可见性")])]),t._v(" "),_("p",[t._v("UML系列文章（二）\n2020-07-02"),_("br"),t._v("\n动态模型图（用例图，时序图等）")]),t._v(" "),_("h2",{attrs:{id:"✅动态模型图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#✅动态模型图"}},[t._v("#")]),t._v(" ✅动态模型图")]),t._v(" "),_("h2",{attrs:{id:"_1-用例图-★★★-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-用例图-★★★-2"}},[t._v("#")]),t._v(" 1.用例图（★★★）")]),t._v(" "),_("h3",{attrs:{id:"_1、用途"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、用途"}},[t._v("#")]),t._v(" 1、用途：")]),t._v(" "),_("p",[t._v("用例图(Use Case Diagram): 也称为用户模型图, 是从软件"),_("strong",[t._v("需求分析")]),t._v("到最终实现的第一步, 它是从客户的角度来描述系统功能。\n所以是\n1）站在客户如何使用系统的角度，把整个软件系统描述出来。\n2）就是把客户的需求给固定下来。\n3）画的图能进行交流就好了，仁者见仁智者见智的过程，并不要求每个人画的用例图完全一样。")]),t._v(" "),_("h3",{attrs:{id:"_2、组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、组件"}},[t._v("#")]),t._v(" 2、组件")]),t._v(" "),_("p",[t._v("参与者(Actor)\n用例(Use Case):\n代码层面，用例，你就把它想象成是一个简单的功能模块就好了。\n关系")]),t._v(" "),_("h3",{attrs:{id:"_3、用例之间关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、用例之间关系"}},[t._v("#")]),t._v(" 3、用例之间关系")]),t._v(" "),_("ul",[_("li",[t._v("1）泛化："),_("font",{staticStyle:{background:"yellow"}},[t._v("代码层次是用“继承”")]),t._v("（C++或Java）")],1),t._v(" "),_("li",[t._v("2）依赖："),_("font",{staticStyle:{background:"yellow"}},[t._v("代码层面是用，“一个类是另一个类”的"),_("strong",[t._v("函数参数")]),t._v("或"),_("strong",[t._v("函数返回值")]),t._v("实现")])],1)]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("strong",[t._v("包含")]),t._v(":一个用例可以包含其他用例具有的行为，也就是说，"),_("strong",[t._v("这个功能模块要使用另一个功能模块")]),t._v("。\neg.教学管理系统，添加学生信息（用例）要使用更新数据库（用例）这个功能模块。")]),t._v(" "),_("li",[_("strong",[t._v("扩展")]),t._v("：完成某个功能的时候"),_("strong",[t._v("偶尔")]),t._v("会执行另外一个功能, 则用扩展关系表示。\neg.比如，在保存成绩的时候，发现，这个学生没有考试及格，以前的做法，就需要补考，就需要扩展到打印补考通知单。（偶尔）")])])]),t._v(" "),_("h2",{attrs:{id:"_2-时序图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-时序图"}},[t._v("#")]),t._v(" 2.时序图")]),t._v(" "),_("h2",{attrs:{id:"_3-活动图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-活动图"}},[t._v("#")]),t._v(" 3.活动图")])])}),[],!1,null,null,null);_.default=a.exports}}]);