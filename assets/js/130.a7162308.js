(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{414:function(v,_,t){"use strict";t.r(_);var r=t(14),s=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"数据库基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础"}},[v._v("#")]),v._v(" 数据库基础")]),v._v(" "),_("h2",{attrs:{id:"_1-数据设计基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据设计基础"}},[v._v("#")]),v._v(" 1.数据设计基础")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png",alt:"数据库设计步骤"}})]),v._v(" "),_("h2",{attrs:{id:"_2-红黑树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-红黑树"}},[v._v("#")]),v._v(" 2.红黑树")]),v._v(" "),_("h3",{attrs:{id:"_2-1-应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-应用场景"}},[v._v("#")]),v._v(" 2.1.应用场景")]),v._v(" "),_("ul",[_("li",[v._v("C++中STL中的map,set")]),v._v(" "),_("li",[v._v("Java中的HashMap")]),v._v(" "),_("li",[v._v("维基百科-"),_("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[v._v("红黑树的应用"),_("OutboundLink")],1)])]),v._v(" "),_("h3",{attrs:{id:"_2-2-红黑树笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-红黑树笔记"}},[v._v("#")]),v._v(" 2.2.红黑树笔记")]),v._v(" "),_("blockquote",[_("p",[v._v("红黑树变色、自旋、自平衡原理")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/01.png",alt:"01"}})]),v._v(" "),_("ul",[_("li",[v._v("本节课的重点是，自旋和变色")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb002.png",alt:"rb002"}})]),v._v(" "),_("ul",[_("li",[v._v("注意：红黑树新插入的节点『必须』是红色！")]),v._v(" "),_("li",[v._v("每个叶子节点都是黑色的空节点（NIL）！")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb03.png",alt:"rbb03"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb04.png",alt:"rbb04"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb05.png",alt:"rbb05"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb06.png",alt:"rbb06"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb07.png",alt:"rbb07"}})]),v._v(" "),_("ul",[_("li",[_("p",[v._v("NIL的颜色必须是黑色的，在Java里面，他的值是NULL，因为这个叶子节点是虚拟出来的。")]),v._v(" "),_("p",[v._v("（这个是为了用来满足性质4的）")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb08.png",alt:"rbb08"}})]),v._v(" "),_("p",[v._v("很显然有2个属性；\n1）不能有两个连续的红色")]),v._v(" "),_("p",[v._v("2）红色节点，他必须有父节点，而且这个父节点一定是黑色的。")]),v._v(" "),_("p",[v._v("3）红色节点不能为根节点（性质2），所以红色节点只能为"),_("strong",[v._v("子节点")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200325816.png",alt:"image-20210702200325816"}})]),v._v(" "),_("ul",[_("li",[v._v("叶子节点就是上面的，黑色椭圆。")]),v._v(" "),_("li",[v._v("红色非平衡和黑色完美平衡（中庸），红黑树是不完美平衡的。")]),v._v(" "),_("li",[v._v("AVL却是完美平衡。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb10.png",alt:"rb10"}})]),v._v(" "),_("ul",[_("li",[v._v("因为左边这样的AVL，不稳定，他这个时候退化为链表了。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb11.png",alt:"rb11"}})]),v._v(" "),_("p",[v._v("新增一个节点，你就要看看这棵树是否违反了我们红黑树的性质，然后，让他自己来平衡。")]),v._v(" "),_("p",[v._v("我们任何新增的红黑树的节点，默认都是新加"),_("strong",[v._v("红色")]),v._v("的节点。（因为这个不会影响性质5）")]),v._v(" "),_("p",[v._v("自平衡就是一个调整的过程。")]),v._v(" "),_("p",[v._v("具体的：")]),v._v(" "),_("p",[v._v("你新增的这个节点后，你去编代码的时候，你只需要考虑。从当前节点的三代！！")]),v._v(" "),_("p",[v._v("超过第4代就不管了。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200621045.png",alt:"image-20210702200621045"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200632828.png",alt:"image-20210702200632828"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb.png",alt:"rb"}})]),v._v(" "),_("p",[v._v("你祖父母都降级了，所以给他一个好处，就是把B节点给他了。")]),v._v(" "),_("p",[v._v("（只要有旋转，就会有"),_("strong",[v._v("一条线")]),v._v("互换的。）")]),v._v(" "),_("p",[_("strong",[v._v("旋转节点的圆心，一定是他的子节点！")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200729288.png",alt:"image-20210702200729288"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft.png",alt:"rbleft"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft2.png",alt:"rbleft2"}})]),v._v(" "),_("ul",[_("li",[v._v("上面的旋转，根本可以不分左边还是右边旋转。")]),v._v(" "),_("li",[v._v("下面是红黑树的操作：")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091105553.png",alt:"image-20210703091105553"}})]),v._v(" "),_("p",[v._v("CRUD")]),v._v(" "),_("p",[v._v("c-"),_("strong",[v._v("新增")])]),v._v(" "),_("p",[v._v("查找很简答--------------")]),v._v(" "),_("p",[v._v("r-读，"),_("strong",[v._v("查找")])]),v._v(" "),_("p",[v._v("U-更新（查找到后改就）")]),v._v(" "),_("p",[v._v("D-删除（复杂）")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcase.png",alt:"rbcase"}})]),v._v(" "),_("ul",[_("li",[v._v("上面是我编程的时候的很多case的。")]),v._v(" "),_("li",[v._v("上面是做红黑树的所有情况。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcreate.png",alt:"rbcreate"}})]),v._v(" "),_("p",[v._v("直系CPG在一条线上，/或者\\")]),v._v(" "),_("p",[v._v("三角关系是，不在一条直线上（也2种）")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091322201.png",alt:"image-20210703091322201"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091336549.png",alt:"image-20210703091336549"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091344050.png",alt:"image-20210703091344050"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091354784.png",alt:"image-20210703091354784"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbtrac.png",alt:"rbtrac"}})]),v._v(" "),_("ul",[_("li",[v._v("三角关系，其实就是先转换为三点一线关系。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091444837.png",alt:"image-20210703091444837"}})]),v._v(" "),_("h2",{attrs:{id:"_3-基础面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-基础面试题"}},[v._v("#")]),v._v(" 3.基础面试题")]),v._v(" "),_("h3",{attrs:{id:"_3-1-请你说一下数据库事务以及四个特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-请你说一下数据库事务以及四个特性"}},[v._v("#")]),v._v(" 3.1.请你说一下数据库事务以及四个特性")]),v._v(" "),_("p",[v._v("​\t"),_("strong",[v._v("事务(Transaction)")]),v._v("：是由"),_("strong",[v._v("一系列")]),v._v("对系统中数据进行访问与更新的操作所组成的一个程序执行"),_("strong",[v._v("逻辑单元")]),v._v("。事务是DBMS中最基础的单位，事务不可分割。『"),_("strong",[v._v("一组")]),_("font",{staticStyle:{background:"yellow"}},[v._v("原子性")]),v._v("的SQL查询』")],1),v._v(" "),_("p",[v._v("​\t事务具有4个基本特征，分别是:（简称ACID）")]),v._v(" "),_("ul",[_("li",[v._v("原子性("),_("strong",[v._v("A")]),v._v("tomicity)")]),v._v(" "),_("li",[v._v("一致性("),_("strong",[v._v("C")]),v._v("onsistency)")]),v._v(" "),_("li",[v._v("隔离性( "),_("strong",[v._v("I")]),v._v("solation）")]),v._v(" "),_("li",[v._v("持久性("),_("strong",[v._v("D")]),v._v("uration）")])]),v._v(" "),_("h3",{attrs:{id:"_3-2-详细说一下数据库-database-中-事务-的4大特征"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-详细说一下数据库-database-中-事务-的4大特征"}},[v._v("#")]),v._v(" 3.2.详细说一下数据库（Database）中“事务”的4大特征")]),v._v(" "),_("ul",[_("li",[v._v("1．原子性("),_("strong",[v._v("A")]),v._v("tomicity)")])]),v._v(" "),_("p",[v._v("原子性是指事务包含的所有操作要么全部成功，要么全部失败"),_("strong",[v._v("回滚")]),v._v("，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。")]),v._v(" "),_("ul",[_("li",[v._v("2.一致性(Consistency)")])]),v._v(" "),_("p",[v._v("一致性：数据库在事务执行前后都保持一致性状态，在"),_("strong",[v._v("一致性状态")]),v._v("下，所有事务对一个数据的"),_("strong",[v._v("读取结果都是相同的。")])]),v._v(" "),_("p",[v._v("一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态,也就是说一个事务"),_("strong",[v._v("执行之前")]),v._v("和"),_("strong",[v._v("执行之后")]),v._v("都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间\n如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。")]),v._v(" "),_("p",[v._v("『"),_("font",{staticStyle:{background:"yellow"}},[v._v("没有完全理解")]),v._v("』")],1),v._v(" "),_("ul",[_("li",[v._v("3.隔离性（Isolation）")])]),v._v(" "),_("p",[v._v("隔离性是当多个用户"),_("strong",[v._v("并发访问")]),v._v("数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个"),_("strong",[v._v("并发事务")]),v._v("之间要相互隔离。")]),v._v(" "),_("p",[v._v("即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。")]),v._v(" "),_("p",[v._v("多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。")]),v._v(" "),_("p",[v._v("这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有"),_("strong",[v._v("各自")]),v._v("的"),_("strong",[v._v("完整数据空间")]),v._v("。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。")]),v._v(" "),_("blockquote",[_("p",[v._v("不同的隔离级别：")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Read Uncommitted（读取"),_("strong",[v._v("未提交")]),v._v("内容）：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("最低的隔离级别")]),v._v("，什么都不需要做，一个事务可以读到"),_("font",{staticStyle:{background:"yellow"}},[v._v("另一个事务")]),_("strong",[v._v("未提交")]),v._v("的结果。所有的并发事务问题都会发生。"),_("font",{staticStyle:{background:"yellow"}},[v._v("脏读")])],1)])]),v._v(" "),_("li",[_("p",[v._v("Read Committed（读取"),_("strong",[v._v("提交")]),v._v("内容）：")]),v._v(" "),_("ul",[_("li",[v._v("只有在事务提交后，其更新结果才会被其他事务看见。可以"),_("strong",[v._v("解决脏读问题")]),v._v("。"),_("font",{staticStyle:{background:"yellow"}},[v._v("不可重复读")])],1)])]),v._v(" "),_("li",[_("p",[v._v("Repeated Read（可重复读）：")]),v._v(" "),_("ul",[_("li",[v._v("在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以"),_("strong",[v._v("解决脏读、不可重复读")]),v._v("。")])])]),v._v(" "),_("li",[_("p",[v._v("Serialization（可串行化）：")]),v._v(" "),_("ul",[_("li",[v._v("事务串行化执行，"),_("strong",[v._v("隔离级别最高")]),v._v("，牺牲了系统的并发性。可以解决并发事务的所有问题。")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("完毕")])]),v._v(" "),_("ul",[_("li",[_("ol",{attrs:{start:"4"}},[_("li",[v._v("持久性（Durability）")])])])]),v._v(" "),_("p",[v._v("持久性是指一个事务"),_("strong",[v._v("一旦被提交了")]),v._v("，那么对数据库中的数据的改变就是"),_("strong",[v._v("永久性")]),v._v("的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")]),v._v(" "),_("p",[v._v("例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，"),_("strong",[v._v("否则就会造成")]),v._v("我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。")]),v._v(" "),_("h3",{attrs:{id:"_3-3-请你说一说数据库事务隔离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-请你说一说数据库事务隔离"}},[v._v("#")]),v._v(" 3.3.请你说一说数据库事务隔离")]),v._v(" "),_("p",[_("strong",[v._v("同一时间")]),v._v("，只允许"),_("strong",[v._v("一个事务")]),v._v("请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。")]),v._v(" "),_("blockquote",[_("p",[v._v("辅助，解释，上面事物的4大特性")])]),v._v(" "),_("h3",{attrs:{id:"_3-4-数据库的三大范式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数据库的三大范式"}},[v._v("#")]),v._v(" 3.4.数据库的三大范式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("第一范式：当关系模式R的所有属性都不能再分解为更基本的数据单位时，称R是满足第一范式，即属性不可分")])]),v._v(" "),_("li",[_("p",[v._v("第二范式：如果关系模式R满足第一范式，并且R得所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第二范式")])]),v._v(" "),_("li",[_("p",[v._v("第三范式：设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，即非主属性不传递依赖于键码")])])]),v._v(" "),_("h3",{attrs:{id:"_3-5-请你说一说数据库索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-请你说一说数据库索引"}},[v._v("#")]),v._v(" 3.5.请你说一说数据库索引")]),v._v(" "),_("p",[v._v("​\t索引是对数据库表中"),_("code",[v._v("一列")]),v._v("或"),_("code",[v._v("多列")]),v._v("的值"),_("strong",[v._v("进行排序")]),v._v("的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则"),_("strong",[v._v("与在表中搜索所有的行相比，索引有助于更快地获取信息")]),v._v("。")]),v._v(" "),_("p",[v._v("索引的一个主要目的就是加快检索表中数据的方法，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的"),_("strong",[v._v("辅助数据结构")]),v._v("。")]),v._v(" "),_("p",[v._v("数据库索引是为了增加查询速度而对表字段附加的一种标识，是对数据库表中一列或多列的值进行排序的一种结构。")]),v._v(" "),_("p",[v._v("DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行"),_("strong",[v._v("全表扫描")]),v._v("，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。")]),v._v(" "),_("h3",{attrs:{id:"_3-6-请你说一说inner-join和left-join"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-请你说一说inner-join和left-join"}},[v._v("#")]),v._v(" 3.6.请你说一说"),_("code",[v._v("inner join")]),v._v("和"),_("code",[v._v("left join")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("left join(左联接) 返回包括"),_("strong",[v._v("左表中的所有记录")]),v._v("和"),_("code",[v._v("右表中联结字段相等")]),v._v("的记录")])]),v._v(" "),_("li",[_("p",[v._v("right join(右联接) 返回包括"),_("strong",[v._v("右表中的所有记录")]),v._v("和"),_("code",[v._v("左表中联结字段相等")]),v._v("的记录")])]),v._v(" "),_("li",[_("p",[v._v("inner join(等值连接) 只返回"),_("strong",[v._v("两个表中联结字段相")]),v._v("等的行")])])]),v._v(" "),_("h3",{attrs:{id:"_3-7-多加索引一定会好吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-多加索引一定会好吗"}},[v._v("#")]),v._v(" 3.7.多加索引一定会好吗")]),v._v(" "),_("ul",[_("li",[v._v("优点：")])]),v._v(" "),_("p",[v._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。")]),v._v(" "),_("p",[v._v("可以"),_("strong",[v._v("大大加快数据的检索速度")]),v._v("，这也是创建索引的最主要的原因。")]),v._v(" "),_("p",[v._v("可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。")]),v._v(" "),_("p",[v._v("在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。")]),v._v(" "),_("p",[v._v("通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。")]),v._v(" "),_("ul",[_("li",[v._v("缺点：")])]),v._v(" "),_("p",[v._v("创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。")]),v._v(" "),_("p",[v._v("索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立"),_("code",[v._v("聚簇索引")]),v._v("，那么需要的空间就会更大。")]),v._v(" "),_("p",[v._v("当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。")]),v._v(" "),_("h3",{attrs:{id:"_3-8-添加索引原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-添加索引原则"}},[v._v("#")]),v._v(" 3.8.添加索引原则")]),v._v(" "),_("p",[v._v("在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。")]),v._v(" "),_("p",[v._v("只有"),_("strong",[v._v("很少数据值的列")]),v._v("也不应该增加索引。这是因为，由于这些列的取值很少，例如"),_("strong",[v._v("人事表的性别列")]),v._v("，在查询的结果中，"),_("code",[v._v("结果集的数据行占了表中数据行的很大比例")]),v._v("，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。")]),v._v(" "),_("p",[v._v("定义为"),_("code",[v._v("text")]),v._v("、"),_("code",[v._v("image")]),v._v("和"),_("code",[v._v("bit")]),v._v("数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。")]),v._v(" "),_("p",[v._v("当"),_("strong",[v._v("修改性能")]),v._v("远远大于"),_("strong",[v._v("检索性能")]),v._v("时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。")]),v._v(" "),_("h3",{attrs:{id:"_3-9-请问k-v存储中-key有哪些要求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-请问k-v存储中-key有哪些要求"}},[v._v("#")]),v._v(" 3.9.请问k-v存储中，key有哪些要求？")]),v._v(" "),_("ul",[_("li",[v._v("兴业银行，网上收集的题目")])]),v._v(" "),_("h3",{attrs:{id:"_3-10-介绍数据库中的wal技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-介绍数据库中的wal技术"}},[v._v("#")]),v._v(" 3.10.介绍数据库中的WAL技术")]),v._v(" "),_("ul",[_("li",[v._v("WAL（Write-Ahead Logging，"),_("strong",[v._v("预写式日志")]),v._v("）")]),v._v(" "),_("li",[v._v("是一种数据安全写入机制。就是"),_("strong",[v._v("先写日志，然后在写入磁盘")]),v._v("，这样保证数据的安全性。Mysql中的Redo Log就是采用WAL机制。")]),v._v(" "),_("li",[v._v("Write-Ahead工作机制：先在内存中提交事务，然后写日志(在InnoDB中就是Redo Log，"),_("strong",[v._v("日志是为了防止宕机导致内存数据丢失")]),v._v(")，然后再后台任务中把内存中的数据"),_("strong",[v._v("异步")]),v._v("刷到磁盘。")])]),v._v(" "),_("p",[v._v("WAL优缺点")]),v._v(" "),_("p",[v._v("使用WAL代替回滚日志有其优点和缺点。")]),v._v(" "),_("p",[_("strong",[v._v("优点：")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("在大多数情况下，WAL的速度要快得多。")])]),v._v(" "),_("li",[_("p",[v._v("WAL提供了更多的并发性，因为读卡器不会阻塞写卡器，而写卡器也不会阻塞读卡器。读和写可以同时进行。")])]),v._v(" "),_("li",[_("p",[v._v("使用WAL，磁盘I/O操作往往更为连续。")])]),v._v(" "),_("li",[_("p",[v._v("WAL使用的fsync()操作更少，因此在fsync()系统调用中断的系统上不易受到问题的攻击")])])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("一般情况下需要VFS支持共享内存模式(shared-memory primitives)。")])]),v._v(" "),_("li",[_("p",[v._v("操作数据库文件的进程必须在同一台主机上，不能用在网络操作系统。")])]),v._v(" "),_("li",[_("p",[v._v("持有多个数据库文件的数据库连接对于单个数据库时原子的，对于全部数据库是不原子的。")])]),v._v(" "),_("li",[_("p",[v._v("进入WAL模式以后不能修改page的size。")])]),v._v(" "),_("li",[_("p",[v._v('不能打开只读的WAL数据库(Read-Only Databases)，这进程必须有"-shm"文件的写权限。')])]),v._v(" "),_("li",[_("p",[v._v("对于只进行读操作，很少进行写操作的数据库，要慢那么1到2个百分点。")])]),v._v(" "),_("li",[_("p",[v._v('会有多余的"-wal"和"-shm"文件。')])]),v._v(" "),_("li",[_("p",[v._v("需要开发者注意checkpointing检查点。")])])]),v._v(" "),_("blockquote",[_("p",[v._v("参考：")])]),v._v(" "),_("p",[v._v("版权声明：本文为CSDN博主「weixin_39811842」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_39811842/article/details/111509504")]),v._v(" "),_("h2",{attrs:{id:"关系型数据库和nosql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库和nosql"}},[v._v("#")]),v._v(" 关系型数据库和NoSQL")]),v._v(" "),_("p",[v._v("关系型")]),v._v(" "),_("ul",[_("li",[v._v("SQLite")])]),v._v(" "),_("p",[v._v("NoSQL")]),v._v(" "),_("ul",[_("li",[v._v("MongoDB")]),v._v(" "),_("li",[v._v("Hbase")])])])}),[],!1,null,null,null);_.default=s.exports}}]);