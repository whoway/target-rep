(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{462:function(a,s,t){"use strict";t.r(s);var e=t(14),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"openmp笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#openmp笔记"}},[a._v("#")]),a._v(" OpenMP笔记")]),a._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[a._v("#")]),a._v(" 目录")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[a._v("目录")])]),s("li",[s("a",{attrs:{href:"#杂谈-并行计算中mpi-openmpi-openmp的区别"}},[a._v("杂谈-并行计算中MPI，openMPI，openMP的区别")]),s("ul",[s("li",[s("a",{attrs:{href:"#mpi"}},[a._v("MPI")])]),s("li",[s("a",{attrs:{href:"#openmp"}},[a._v("OpenMP")])]),s("li",[s("a",{attrs:{href:"#⭐对比"}},[a._v("⭐对比")])])])]),s("li",[s("a",{attrs:{href:"#_1-gcc的openmp"}},[a._v("1.GCC的OpenMP")])]),s("li",[s("a",{attrs:{href:"#_2-openmp指令和库函数介绍"}},[a._v("2.OpenMP指令和库函数介绍")]),s("ul",[s("li",[s("a",{attrs:{href:"#_2-1-openmp-的指令"}},[a._v("2.1.OpenMP 的指令")])]),s("li",[s("a",{attrs:{href:"#_2-2-openmp的子句有以下"}},[a._v("2.2.OpenMP的子句有以下")])]),s("li",[s("a",{attrs:{href:"#_2-3-使用示例"}},[a._v("2.3.使用示例")])]),s("li",[s("a",{attrs:{href:"#_2-4-openmp几个常用的库函数"}},[a._v("2.4.OpenMP几个常用的库函数")])])])]),s("li",[s("a",{attrs:{href:"#_3-介绍多线程"}},[a._v("3.介绍多线程")])]),s("li",[s("a",{attrs:{href:"#参考资料"}},[a._v("参考资料")])])])]),s("p"),a._v(" "),s("p",[a._v("[TOC]")]),a._v(" "),s("h2",{attrs:{id:"杂谈-并行计算中mpi-openmpi-openmp的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#杂谈-并行计算中mpi-openmpi-openmp的区别"}},[a._v("#")]),a._v(" 杂谈-并行计算中MPI，openMPI，openMP的区别")]),a._v(" "),s("ul",[s("li",[a._v("主要源于对这几个概念本身理解的不清晰")]),a._v(" "),s("li",[a._v("这几个缩写的字母确实是如此的近似。")])]),a._v(" "),s("h3",{attrs:{id:"mpi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mpi"}},[a._v("#")]),a._v(" MPI")]),a._v(" "),s("p",[a._v("英文全称是Message Passing Interface，这个就很明了了，信息传递接口，是独立于语言的"),s("strong",[a._v("通信协议（标准）")]),a._v("，是一个"),s("strong",[a._v("库")])]),a._v(" "),s("p",[a._v("MPI的实现有")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("MPICH")])]),a._v(" "),s("li",[a._v("MPI-1")]),a._v(" "),s("li",[a._v("MPI-2等等")]),a._v(" "),s("li",[s("strong",[a._v("openMPI")]),a._v("：英文全称是（open Message Passing Interface）。"),s("strong",[a._v("openMPI是MPI的一种实现")]),a._v("，一种库项目")]),a._v(" "),s("li",[a._v("NCCL")]),a._v(" "),s("li",[a._v("HCCL")]),a._v(" "),s("li",[a._v("GLOO都是是MPI的一种具体实现")])]),a._v(" "),s("h3",{attrs:{id:"openmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#openmp"}},[a._v("#")]),a._v(" OpenMP")]),a._v(" "),s("p",[a._v("英文全称是Open Multiprocessing，是一种"),s("strong",[a._v("并行的实现和方法")]),a._v("，也可以认为是共"),s("strong",[a._v("享存储结构上的一种编程模型")]),a._v("，可用于共享内存并行系统的多线程程序设计的一套指导性注释（Compiler Directive）。")]),a._v(" "),s("h3",{attrs:{id:"⭐对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐对比"}},[a._v("#")]),a._v(" ⭐对比")]),a._v(" "),s("p",[a._v("在当前的并行机子中，openMP和openMPI"),s("strong",[a._v("都是需要")]),a._v("的（从上面的各自概念可以看出）")]),a._v(" "),s("ul",[s("li",[a._v("openMP用于本地的并行计算（共享内存内存架构），支持目前所有平台上的c,fortran等的共享内存式并行计算，它相当于是给出了一个让并行编程更加容易实现的模型")]),a._v(" "),s("li",[a._v("而openMPI则是用于机器之间的通信（分布式内存架构）")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("对比")]),a._v(" "),s("th",[a._v("MPI")]),a._v(" "),s("th",[a._v("OpenMP")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("分类")]),a._v(" "),s("td",[a._v("Mpich, OpenMPI")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("作用")]),a._v(" "),s("td",[a._v("用于"),s("strong",[a._v("机器之间")]),a._v("的通信（分布式内存架构）")]),a._v(" "),s("td",[a._v("用于"),s("strong",[a._v("本地")]),a._v("的并行计算")])])])]),a._v(" "),s("h2",{attrs:{id:"_1-gcc的openmp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-gcc的openmp"}},[a._v("#")]),a._v(" 1.GCC的OpenMP")]),a._v(" "),s("ul",[s("li",[a._v("参考资料："),s("a",{attrs:{href:"https://mp.weixin.qq.com/s/u-TW2A8pwz_rWakvZjxYog",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://mp.weixin.qq.com/s/u-TW2A8pwz_rWakvZjxYog"),s("OutboundLink")],1)])]),a._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//demo.cpp ")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("<iostream>")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("using")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("namespace")]),a._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[a._v("_OPENMP")])]),a._v("\n        cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" support openmp "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("else")])]),a._v("\n        cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" not support openmp"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<<")]),a._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("endif")])]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("➜  desktop-python g++ demo.cpp\n➜  desktop-python ./a.out\n not support openmp\n➜  desktop-python g++ demo.cpp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fopenmp")]),a._v("\n➜  desktop-python ./a.out\n support openmp\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("​\t也有运行方式")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("g++ "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-std")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c++11  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-g")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-pthread")]),a._v(" -Wno-format "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fpermissive")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fopenmp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" main.o "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" main.cpp\ng++ "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-std")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c++11  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-g")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-pthread")]),a._v(" -Wno-format "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fpermissive")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fopenmp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" mainapp.exe main.o\n./mainapp.exe\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"_2-openmp指令和库函数介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-openmp指令和库函数介绍"}},[a._v("#")]),a._v(" 2.OpenMP指令和库函数介绍")]),a._v(" "),s("p",[a._v("​\t在C/C++中，OpenMP 指令使用的格式为")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#pragma omp 指令 [子句[子句]…]")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#pragma omp parallel private(i, j)")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("ul",[s("li",[a._v("parallel 就是指令， private 是子句")]),a._v(" "),s("li",[a._v("为叙述方便把包含"),s("code",[a._v("#pragma")]),a._v(" 和 OpenMP 指令的一行叫做语句，如上面那行叫 parallel 语句")])]),a._v(" "),s("h3",{attrs:{id:"_2-1-openmp-的指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-openmp-的指令"}},[a._v("#")]),a._v(" 2.1.OpenMP 的指令")]),a._v(" "),s("p",[a._v("有以下一些：")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("parallel")]),a._v("，用在一个代码段乊前，表示这段代码将被多个线程并行执行")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("for")]),a._v("，用亍 for 循环乊前，将循环分配到多个线程中并行执行，必须保证每次循环乊间无相关性。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("parallel for")]),a._v("， parallel 和 for 语句的结合，也是用在一个 for 循环乊前，表示 for 循环的代码将被多个线")])])]),a._v(" "),s("p",[a._v("程并行执行。")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("sections")]),a._v("，用在可能会被并行执行的代码段乊前")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("parallel sections")]),a._v("，parallel 和 sections 两个语句的结合")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("critical")]),a._v("，用在一段代码临界区前")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("single")]),a._v("，用在一段叧被单个线程执行的代码段乊前，表示后面的代码段将被单线程执行。")])])]),a._v(" "),s("h3",{attrs:{id:"_2-2-openmp的子句有以下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-openmp的子句有以下"}},[a._v("#")]),a._v(" 2.2.OpenMP的子句有以下")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("private,")]),a._v(" 指定每个线程都有它自己的变量私有副本。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("firstprivate")]),a._v("，指定每个线程都有它自己的变量私有副本，并且变量要被继承主线程中的刜值。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("lastprivate")]),a._v("，主要是用来指定将线程中的私有变量的值在并行处理结束后复制回主线程中的对应变量。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("reduce")]),a._v("，用来指定一个戒多个变量是私有的，并且在并行处理结束后这些变量要执行指定的运算。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("nowait")]),a._v("，忽略指定中"),s("strong",[a._v("暗含")]),a._v("的等待")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("num_threads")]),a._v("，指定线程的个数")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("schedule")]),a._v("，指定如何调度 for 循环迭代")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("shared")]),a._v("，指定一个戒多个变量为多个线程间的共享变量")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("ordered")]),a._v("，用来指定 for 循环的执行要按顺序执行")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("copyprivate")]),a._v("，用亍 single 指令中的指定变量为多个线程的共享变量")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("copyin")]),a._v("，用来指定一个 threadprivate 的变量的值要用主线程的值进行初始化。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("default")]),a._v("，用来指定并行处理区域内的变量的使用方式，缺省是 shared")])])]),a._v(" "),s("h3",{attrs:{id:"_2-3-使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-使用示例"}},[a._v("#")]),a._v(" 2.3.使用示例")]),a._v(" "),s("h3",{attrs:{id:"_2-4-openmp几个常用的库函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-openmp几个常用的库函数"}},[a._v("#")]),a._v(" 2.4.OpenMP几个常用的库函数")]),a._v(" "),s("blockquote",[s("p",[a._v("线程相关")])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("omp_get_num_procs")]),a._v(", 返回"),s("strong",[a._v("运行本线程")]),a._v("的多处理机的"),s("strong",[a._v("处理器个数")]),a._v("。")]),a._v(" "),s("li",[s("code",[a._v("omp_get_num_threads")]),a._v(", 返回"),s("strong",[a._v("当前并行区域")]),a._v("中的活动线程个数。")]),a._v(" "),s("li",[s("code",[a._v("omp_get_thread_num")]),a._v(", 返回线程号")]),a._v(" "),s("li",[s("code",[a._v("omp_set_num_threads")]),a._v(", 设置并行执行代码时的线程个数")])]),a._v(" "),s("blockquote",[s("p",[a._v("锁相关")])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("omp_init_lock")]),a._v(", "),s("strong",[a._v("初始化")]),a._v("一个简单锁")]),a._v(" "),s("li",[s("code",[a._v("omp_set_lock")]),a._v("， "),s("strong",[a._v("上锁")]),a._v("操作")]),a._v(" "),s("li",[s("code",[a._v("omp_unset_lock")]),a._v("， "),s("strong",[a._v("解锁")]),a._v("操作，要和 "),s("code",[a._v("omp_set_lock")]),a._v(" 函数配对使用。")]),a._v(" "),s("li",[s("code",[a._v("omp_destroy_lock")]),a._v("， "),s("code",[a._v("omp_init_lock")]),a._v(" 函数的配对操作函数，关闭一个锁")])]),a._v(" "),s("h2",{attrs:{id:"_3-介绍多线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-介绍多线程"}},[a._v("#")]),a._v(" 3.介绍多线程")]),a._v(" "),s("p",[a._v("​\t在C++中使用OpenMP进行"),s("a",{attrs:{href:"http://www.uml.org.cn/c%2B%2B/201810291.asp",target:"_blank",rel:"noopener noreferrer"}},[a._v("多线程编程"),s("OutboundLink")],1)]),a._v(" "),s("ul",[s("li",[a._v("线程库A")])]),a._v(" "),s("p",[a._v("多线程在实际的编程中的重要性不言而喻。对于C++而言，当我们需要使用多线程时")]),a._v(" "),s("ul",[s("li",[a._v("可以使用"),s("code",[a._v("boost::thread")]),a._v("库")]),a._v(" "),s("li",[a._v("或者自从C++11开始支持的"),s("code",[a._v("std::thread")])]),a._v(" "),s("li",[a._v("也可以使用操作系统相关的线程API，如在Linux上，可以使用"),s("code",[a._v("pthread")]),a._v("库。")]),a._v(" "),s("li",[a._v("除此之外，还可以使用omp（"),s("code",[a._v("openMP")]),a._v("）来使用多线程。\n"),s("ul",[s("li",[a._v("它的好处是跨平台，使用简单。")])])])]),a._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),s("ul",[s("li",[a._v("OpenMP 简易教程，周伟明，https://lemon-412.github.io/imgs/20200516OpenMP_simple_Program.pdf")])])])}),[],!1,null,null,null);s.default=r.exports}}]);