(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{421:function(s,t,a){"use strict";a.r(t);var n=a(14),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql知识点总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql知识点总结"}},[s._v("#")]),s._v(" Mysql知识点总结")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("font "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("style")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"background:yellow"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("font "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("style")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"background: MediumSpringGreen"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[s._v("#")]),s._v(" 目录")]),s._v(" "),t("p",[s._v("[TOC]")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#目录"}},[s._v("目录")])]),t("li",[t("a",{attrs:{href:"#学习方法论"}},[s._v("学习方法论")])]),t("li",[t("a",{attrs:{href:"#面试题"}},[s._v("面试题")]),t("ul",[t("li",[t("a",{attrs:{href:"#为什么-mysql-采用-b-树作为索引"}},[s._v("为什么 MySQL 采用 B+ 树作为索引？")])]),t("li",[t("a",{attrs:{href:"#mysql-给主键列设置自增属性的代码例子"}},[s._v("mysql 给主键列设置自增属性的代码例子")])]),t("li",[t("a",{attrs:{href:"#mysql回表是什么意思"}},[s._v("mysql回表是什么意思")])]),t("li",[t("a",{attrs:{href:"#_1-mysql的聚集索引和非聚集索引"}},[s._v("1.MySQL的聚集索引和非聚集索引")])]),t("li",[t("a",{attrs:{href:"#实现事务必须要遵守-4-个特性"}},[s._v("实现事务必须要遵守 4 个特性？")])]),t("li",[t("a",{attrs:{href:"#进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[s._v("进阶-InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？")])]),t("li",[t("a",{attrs:{href:"#_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[s._v("2.并行事务会引发哪3个问题？详细介绍一下什么是脏读、不可重复读、幻读")])]),t("li",[t("a",{attrs:{href:"#_3-请你说一说mysql的四种隔离状态-隔离级别"}},[s._v("3.请你说一说mysql的四种隔离状态（隔离级别）")])]),t("li",[t("a",{attrs:{href:"#_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[s._v("4进阶问题-这四种隔离级别具体是如何实现的呢？")])]),t("li",[t("a",{attrs:{href:"#_4-2-请你介绍一下mysql的mvcc机制"}},[s._v("4.2.请你介绍一下mysql的MVCC机制")])]),t("li",[t("a",{attrs:{href:"#_4-3-请问sql优化方法有哪些"}},[s._v("4.3.请问SQL优化方法有哪些")])]),t("li",[t("a",{attrs:{href:"#_4-4-说一下mysql引擎的概念和分类"}},[s._v("4.4.说一下MySQL引擎的概念和分类")])]),t("li",[t("a",{attrs:{href:"#_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[s._v("4.5.说一下最常用的2个MySQL引擎InnoDB和Mylsam的对比")])]),t("li",[t("a",{attrs:{href:"#最左匹配原则的原理"}},[s._v("最左匹配原则的原理")])])])]),t("li",[t("a",{attrs:{href:"#各种索引的-术语"}},[s._v("各种索引的-术语")]),t("ul",[t("li",[t("a",{attrs:{href:"#⭐️覆盖索引⭐️是什么、如何使用覆盖索引"}},[s._v("⭐️覆盖索引⭐️是什么、如何使用覆盖索引")])])])]),t("li",[t("a",{attrs:{href:"#⭐️索引的分类"}},[s._v("⭐️索引的分类")])]),t("li",[t("a",{attrs:{href:"#附录-搭建mysql学习环境"}},[s._v("附录-搭建mysql学习环境")])]),t("li",[t("a",{attrs:{href:"#参看资料"}},[s._v("参看资料")])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"学习方法论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习方法论"}},[s._v("#")]),s._v(" 学习方法论")]),s._v(" "),t("p",[s._v("分清楚概念中『逻辑上的』和『实现层面上的』")]),s._v(" "),t("p",[s._v("将数据结构和算法中的『逻辑结构』和『物理结构』的概念，转移到『数据库』的学习")]),s._v(" "),t("ul",[t("li",[s._v("如上：\n"),t("ul",[t("li",[t("strong",[s._v("逻辑")]),s._v("上有：隔离级别")]),s._v(" "),t("li",[t("strong",[s._v("物理实现")]),s._v("上有：MVCC啥的")])])]),s._v(" "),t("li",[s._v("优点："),t("font",{staticStyle:{background:"yellow"}},[s._v("将各种术语概念连接在一起，以后就能少被网上层次不齐的资料概念带偏")])],1)]),s._v(" "),t("h2",{attrs:{id:"面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[s._v("#")]),s._v(" 面试题")]),s._v(" "),t("h3",{attrs:{id:"为什么-mysql-采用-b-树作为索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-mysql-采用-b-树作为索引"}},[s._v("#")]),s._v(" 为什么 MySQL 采用 B+ 树作为索引？")]),s._v(" "),t("h4",{attrs:{id:"mysql的范围查询啥意思"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql的范围查询啥意思"}},[s._v("#")]),s._v(" mysql的范围查询啥意思？")]),s._v(" "),t("p",[s._v("MySQL的范围查询是指通过指定一个数值范围来筛选数据的查询方式。可以使用 BETWEEN AND 操作符或者 IN 操作符来实现。")]),s._v(" "),t("p",[s._v("使用 BETWEEN AND 操作符，在 WHERE 子句中指定一个"),t("strong",[s._v("数值范围")]),s._v("，MySQL 会返回"),t("strong",[s._v("该范围")]),s._v("内所有符合条件的记录。例如，下面的 SQL 语句将从表中选择 age 字段值在 18 到 30 之间的记录：")]),s._v(" "),t("div",{staticClass:"language-mysql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("复制代码SELECT * FROM Persons WHERE age BETWEEN 18 AND 30;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("使用 IN 操作符，可以指定"),t("strong",[s._v("多个数值范围")]),s._v("，MySQL 会返回匹配任意一个指定范围的所有符合条件的记录。例如，下面的 SQL 语句将从表中选择 age 字段值等于 18 或 21 或 25 的记录：")]),s._v(" "),t("div",{staticClass:"language-mysql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("复制代码SELECT * FROM Persons WHERE age IN (18, 21, 25);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("以上内容参考了 [1] 和 [2]。")]),s._v(" "),t("h4",{attrs:{id:"什么叫自增主键索引-举个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么叫自增主键索引-举个例子"}},[s._v("#")]),s._v(" 什么叫自增主键索引，举个例子")]),s._v(" "),t("p",[s._v("​\t自增主键索引是指在数据库表中，使用"),t("strong",[s._v("自增长的数字")]),s._v("作为主键，并且为该主键创建索引。举个例子，比如一个用户表，其中id字段为自增主键索引，每次插入新用户时，"),t("strong",[s._v("id会自动递增")]),s._v("，同时该字段也被索引，方便快速查询。")]),s._v(" "),t("p",[s._v("​\t自增主键索引是一种特殊的索引类型，它是在一个表中为主键添加 AUTO_INCREMENT 属性后所创建的一类索引。自增主键索引可以大幅提高插入数据的性能，并且还可以保证数据的唯一性。")]),s._v(" "),t("p",[s._v("​\t举个例子，考虑下面这样一个表：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("复制代码CREATE TABLE Persons (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  name VARCHAR(50) NOT NULL,\n  age INT(3) NOT NULL,\n  PRIMARY KEY (id)\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在该表中，我们为 id 字段添加了 AUTO_INCREMENT 属性，并将其作为主键。这样，每次往表中插入数据时，MySQL 都会自动生成一个唯一的 id 值并填充到 id 字段中。")]),s._v(" "),t("p",[s._v("同时，由于 id 字段被定义为主键，也会自动创建一个以 id 为索引字段的索引（即自增主键索引），该索引会对 id 字段进行排序，并且能够快速定位到指定的数据记录。")]),s._v(" "),t("p",[s._v("举个例子，如果我们要查询 id 为 1000 的数据记录，MySQL 可以直接从自增主键索引中查找到该记录所在的页码和页内偏移量，然后再跳转到对应的磁盘块上读取实际的数据记录，从而减少了磁盘 I/O 操作次数，提高了查询效率。")]),s._v(" "),t("h4",{attrs:{id:"那我普通的列能不能设置自增呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那我普通的列能不能设置自增呢"}},[s._v("#")]),s._v(" 那我普通的列能不能设置自增呢？")]),s._v(" "),t("p",[s._v("数据库中普通列如何设置自增")]),s._v(" "),t("p",[s._v("自增属性只能用于"),t("strong",[s._v("主键列")]),s._v("或"),t("strong",[s._v("唯一索引列")]),s._v("上，因此普通的列不能设置自增。")]),s._v(" "),t("p",[s._v("这是因为自增属性的本质就是在每次插入数据时自动生成一个唯一值，从而保证主键或唯一索引的唯一性。如果在一个普通的列上定义自增属性，那么该列的值将与其他记录的该列值相同，不能满足唯一性要求，也就失去了自增属性的意义。")]),s._v(" "),t("p",[s._v("当然，你可以通过使用触发器（Trigger）或自定义函数（User-Defined Functions）等手段来模拟实现自增属性，但这些方法会带来额外的性能开销和复杂性，不如直接使用主键或唯一索引来实现自增功能更加方便和高效。")]),s._v(" "),t("h3",{attrs:{id:"mysql-给主键列设置自增属性的代码例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-给主键列设置自增属性的代码例子"}},[s._v("#")]),s._v(" mysql 给主键列设置自增属性的代码例子")]),s._v(" "),t("p",[s._v("当我们定义一个学生表时，可以通过以下 MySQL 代码给 "),t("code",[s._v("id")]),s._v(" 列设置自增属性：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("复制代码CREATE TABLE student (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  name VARCHAR(50),\n  age INT(3),\n  PRIMARY KEY (id)\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("以上代码中，我们在 "),t("code",[s._v("id")]),s._v(" 列上使用了 "),t("code",[s._v("AUTO_INCREMENT")]),s._v(" 关键字来设置其自增属性，并将其作为主键。这样，每当向 "),t("code",[s._v("student")]),s._v(" 表中插入一条新的记录时，"),t("code",[s._v("id")]),s._v(" 列的值会自动递增，从而保证了每个学生记录都有唯一的 "),t("code",[s._v("id")]),s._v(" 值。")]),s._v(" "),t("p",[s._v("需要注意的是，定义主键时必须使用 "),t("code",[s._v("NOT NULL")]),s._v(" 约束来确保主键值的唯一性，因为在 MySQL 中，主键列默认是不能包含 "),t("code",[s._v("NULL")]),s._v(" 值的。如果希望允许 "),t("code",[s._v("NULL")]),s._v(" 值，可以在定义列时显式地指定 "),t("code",[s._v("NULL")]),s._v("，并且将其与其他列一起作为复合主键来使用。")]),s._v(" "),t("h3",{attrs:{id:"mysql回表是什么意思"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql回表是什么意思"}},[s._v("#")]),s._v(" mysql回表是什么意思")]),s._v(" "),t("p",[s._v("在 MySQL 中，回表（"),t("code",[s._v("ref")]),s._v("）是指在执行索引查询时，如果查询结果中还包含了非索引列，MySQL 就需要利用查询结果中的主键值（或唯一键值）再次访问原始表格，以获取这些非索引列的数值。这个过程就被称为回表。")]),s._v(" "),t("h3",{attrs:{id:"_1-mysql的聚集索引和非聚集索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql的聚集索引和非聚集索引"}},[s._v("#")]),s._v(" 1.MySQL的聚集索引和非聚集索引")]),s._v(" "),t("p",[s._v("聚集索引和非聚集索引的根本区别是表记录的排列顺序和与索引的排列顺序是否一致。")]),s._v(" "),t("p",[s._v("1、聚集索引")]),s._v(" "),t("p",[s._v("​\t聚集索引表记录的排列顺序和索引的排列顺序一致（以InnoDB聚集索引的主键索引来说，叶子节点中存储的就是行数据，行数据在物理储器中的真实地址就是按照主键索引树形成的顺序进行排列的），所以"),t("strong",[s._v("查询效率快")]),s._v("，只要找到第一个索引值记录，其余就连续性的记录在物理也一样连续存放。聚集索引对应的缺点就是"),t("strong",[s._v("修改慢")]),s._v("，因为为了保证表中记录的物理和索引顺序一致，在记录插入的时候，会对数据页重新排序（因为在真实物理存储器的存储顺序只能有一种，而插入新数据必然会导致主键索引树的变化，主键索引树的顺序发生了改变，叶子节点中存储的行数据也要随之进行改变，就会发生大量的数据移动操作，所以效率会慢）。"),t("strong",[s._v("因为在物理内存中的顺序只能有一种，所以聚集索引在一个表中只能有一个")]),s._v("。")]),s._v(" "),t("p",[s._v("2、非聚集索引")]),s._v(" "),t("p",[s._v("​\t非聚集索引制定了表中记录的逻辑顺序，但是记录的物理和索引不一定一致（在逻辑上数据是按顺序排存放的，但是物理上在真实的存储器中是散列存放的），两种索引都采用B+树结构，**非聚集索引的叶子层并不和实际数据页相重叠，而采用叶子层包含一个指向表中的记录在数据页中的指针方式。**非聚集索引层次多，不会造成数据重排。所以如果表的读操作远远多于写操作，那么就可以使用非聚集索引。")]),s._v(" "),t("h3",{attrs:{id:"实现事务必须要遵守-4-个特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现事务必须要遵守-4-个特性"}},[s._v("#")]),s._v(" 实现事务必须要遵守 4 个特性？")]),s._v(" "),t("p",[t("strong",[s._v("原子性（Atomicity）")]),s._v("：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，")]),s._v(" "),t("p",[t("strong",[s._v("持久性（Durability）")]),s._v("：事务处理结束后，对数据的修改就是永久的，即便系"),t("strong",[s._v("统故障也不会丢失")]),s._v("「因为有"),t("font",{staticStyle:{background:"yellow"}},[s._v("redo日志")]),s._v("」")],1),s._v(" "),t("p",[t("strong",[s._v("隔离性（Isolation）")]),s._v("：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。")]),s._v(" "),t("p",[t("strong",[s._v("一致性（Consistency）")]),s._v("：是指事务操作前和操作后，数据满足"),t("font",{staticStyle:{background:"yellow"}},[s._v("「完整性约束」")]),s._v("，数据库保持一致性状态。")],1),s._v(" "),t("p",[s._v("​\t我的理解：事务操作前到后的"),t("strong",[s._v("状态")]),s._v("，通过逆向操作，是"),t("font",{staticStyle:{background:"yellow"}},[s._v("可逆的")]),s._v("！")],1),s._v(" "),t("h3",{attrs:{id:"进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[s._v("#")]),s._v(" 进阶-InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("持久性")]),s._v("是通过 redo log （重做日志）来保证的；")]),s._v(" "),t("li",[t("strong",[s._v("原子性")]),s._v("是通过 "),t("strong",[s._v("undo log（回滚日志）")]),s._v(" 来保证的；")]),s._v(" "),t("li",[t("strong",[s._v("隔离性")]),s._v("是通过 MVCC（多版本并发控制） 或锁机制来保证的；（我觉得还有啥也不管的，马不停蹄的读）")]),s._v(" "),t("li",[t("font",{staticStyle:{background:"yellow"}},[s._v("一致性")]),s._v("则是通过持久性+原子性+隔离性来保证；")],1)]),s._v(" "),t("h3",{attrs:{id:"_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[s._v("#")]),s._v(" 2.并行事务会引发哪3个问题？详细介绍一下什么是脏读、不可重复读、幻读")]),s._v(" "),t("p",[s._v("3种问题，因为MySQL 服务端是允许多个客户端连接的，这意味着 MySQL 会出现"),t("strong",[s._v("同时处理多个事务")]),s._v("的情况。")]),s._v(" "),t("h4",{attrs:{id:"问题严重程度从1-3变麻烦"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题严重程度从1-3变麻烦"}},[s._v("#")]),s._v(" 问题严重程度从1->3变麻烦！")]),s._v(" "),t("p",[s._v("​\t我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。")]),s._v(" "),t("ul",[t("li",[s._v("脏读：读到"),t("strong",[s._v("其他事务未提交")]),s._v("的数据；")]),s._v(" "),t("li",[s._v("不可重复读：前后"),t("strong",[s._v("读取")]),s._v("的数据不一致；")]),s._v(" "),t("li",[s._v("幻读：前后"),t("strong",[s._v("统计")]),s._v("的记录数量不一致。")])]),s._v(" "),t("p",[s._v("严重性排序："),t("font",{staticStyle:{background:"yellow"}},[s._v("幻读>不可重复读>脏读")])],1),s._v(" "),t("h4",{attrs:{id:"_1-脏读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-脏读"}},[s._v("#")]),s._v(" 1.脏读")]),s._v(" "),t("p",[s._v("2个事务操作，A事务读写数后修改数据的时候，B事物进行了读取，然后A事物后续又回滚了，那么B就是读取到了脏数据！")]),s._v(" "),t("p",[t("strong",[s._v("如果一个B事务「读到」了另一个A「"),t("font",{staticStyle:{background:"yellow"}},[s._v("未提交事务")]),s._v("修改过的数据(因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，"),t("strong",[s._v("如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。")]),s._v(")」，就意味着发生了「脏读」现象。")],1)]),s._v(" "),t("h4",{attrs:{id:"_2-不可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-不可重复读"}},[s._v("#")]),s._v(" 2.不可重复读")]),s._v(" "),t("p",[t("font",{staticStyle:{background:"yellow"}},[s._v("select操作（查询操作）")]),s._v("，在1个事务中进行前后2次查询，发现查询结果不一致！")],1),s._v(" "),t("h4",{attrs:{id:"_3-幻读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-幻读"}},[s._v("#")]),s._v(" 3.幻读")]),s._v(" "),t("p",[t("font",{staticStyle:{background:"yellow"}},[s._v("count操作（统计操作）")]),s._v("，在1个事务中进行前后2次统计，发现结果不一致")],1),s._v(" "),t("p",[t("strong",[s._v("在一个事务内多次查询（统计）某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。")])]),s._v(" "),t("h3",{attrs:{id:"_3-请你说一说mysql的四种隔离状态-隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-请你说一说mysql的四种隔离状态-隔离级别"}},[s._v("#")]),s._v(" 3.请你说一说mysql的四种隔离状态（隔离级别）")]),s._v(" "),t("p",[s._v("​\t我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。")]),s._v(" "),t("p",[s._v("​\tSQL 标准提出了四种隔离级别"),t("strong",[s._v("来规避这些现象")]),s._v("，"),t("strong",[s._v("隔离级别越高，性能效率就越低")]),s._v("，这四个隔离级别如下：")]),s._v(" "),t("p",[s._v("✅表示解决了！")]),s._v(" "),t("h4",{attrs:{id:"_4大类-隔离级别从1-4变高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4大类-隔离级别从1-4变高"}},[s._v("#")]),s._v(" 4大类：隔离级别从1->4变高")]),s._v(" "),t("h4",{attrs:{id:"_1-读未提交-read-uncommitted"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-读未提交-read-uncommitted"}},[s._v("#")]),s._v(" 1.读未提交（read-uncommitted）")]),s._v(" "),t("p",[s._v("指"),t("strong",[s._v("一个事务还没提交时")]),s._v("，它做的"),t("strong",[s._v("变更")]),s._v("就能被其他事务看到（这啥也没干，放任不管！）")]),s._v(" "),t("p",[s._v("存在的问题：")]),s._v(" "),t("p",[s._v("🚫脏读（定义就是说明这个没解决）")]),s._v(" "),t("p",[s._v("🚫不可重复读（显然，推理容易知道）")]),s._v(" "),t("p",[s._v("🚫幻读（显然，进一步推理也解决不了）")]),s._v(" "),t("h4",{attrs:{id:"_2-读提交-read-committed-名字解决了-读非提交-即脏读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-读提交-read-committed-名字解决了-读非提交-即脏读"}},[s._v("#")]),s._v(" 2."),t("strong",[s._v("读提交（read committed）")]),s._v("-"),t("font",{staticStyle:{background:"yellow"}},[s._v("名字解决了：读非提交（即脏读）")])],1),s._v(" "),t("p",[s._v("指"),t("strong",[s._v("一个事务提交之后")]),s._v("，它做的变更"),t("strong",[s._v("才能")]),s._v("被其他事务看到；（就是比第1级别，约束了一下，必须事务提交了才能被看到）")]),s._v(" "),t("p",[s._v("解决的问题：")]),s._v(" "),t("p",[s._v("✅脏读")]),s._v(" "),t("p",[s._v("存在的问题：")]),s._v(" "),t("p",[s._v("🚫不可重复读（显然，推理容易知道）")]),s._v(" "),t("p",[s._v("🚫幻读（显然，进一步推理也解决不了）")]),s._v(" "),t("h4",{attrs:{id:"_3-可重复读-repeatable-read-名字解决了-不可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-可重复读-repeatable-read-名字解决了-不可重复读"}},[s._v("#")]),s._v(" 3."),t("strong",[s._v("可重复读（repeatable read）")]),t("font",{staticStyle:{background:"yellow"}},[s._v("名字解决了：不可重复读")])],1),s._v(" "),t("p",[s._v("指一个事务"),t("strong",[s._v("执行过程")]),s._v("中看到的数据，一直跟这个事务"),t("strong",[s._v("启动时")]),s._v("看到的数据是一致的，"),t("strong",[t("font",{staticStyle:{background:"yellow"}},[s._v("MySQL InnoDB 引擎的默认隔离级别")])],1),s._v("；")]),s._v(" "),t("p",[s._v("解决的问题：")]),s._v(" "),t("p",[s._v("✅脏读")]),s._v(" "),t("p",[s._v("✅不可重复读")]),s._v(" "),t("p",[s._v("存在的问题：")]),s._v(" "),t("p",[s._v("🚫幻读（显然，进一步推理也解决不了）")]),s._v(" "),t("h4",{attrs:{id:"面试扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试扩展"}},[s._v("#")]),s._v(" 面试扩展：")]),s._v(" "),t("p",[s._v("​\t不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，"),t("strong",[s._v("我们讨论的 "),t("font",{staticStyle:{background:"yellow"}},[s._v("MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入")])],1),s._v("。")]),s._v(" "),t("p",[s._v("​\tMySQL 在「可重复读」隔离级别下，可以"),t("font",{staticStyle:{background:"yellow"}},[s._v("很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免")]),s._v("），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会"),t("strong",[s._v("影响性能")]),s._v("。")],1),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，详见这篇"),t("a",{attrs:{href:"https://xiaolincoding.com/mysql/transaction/phantom.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("文章 (opens new window)"),t("OutboundLink")],1),s._v("）")]),s._v("，"),t("font",{staticStyle:{background:"MediumSpringGreen"}},[s._v("解决的方案有两种")]),s._v("：")],1),s._v(" "),t("ul",[t("li",[s._v("针对**"),t("font",{staticStyle:{background:"MediumSpringGreen"}},[s._v("快照读")]),t("strong",[s._v("（普通 select 语句），是")]),s._v("通过 "),t("font",{staticStyle:{background:"MediumSpringGreen"}},[s._v("MVCC 方式")]),s._v("解决了幻读**，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。")],1),s._v(" "),t("li",[s._v("针对**"),t("font",{staticStyle:{background:"MediumSpringGreen"}},[s._v("当前读")]),t("strong",[s._v("（select ... for update 等语句），是")]),s._v("通过 "),t("font",{staticStyle:{background:"MediumSpringGreen"}},[s._v("next-key lock（记录锁+间隙锁）")]),s._v("方式解决了幻读**，因为当执行 "),t("code",[s._v("select ... for update")]),s._v(" 语句的时候，会加上 next-key lock，如果"),t("strong",[s._v("有其他事务")]),s._v("在 next-key lock 锁范围内插入了一条记录，那么"),t("strong",[s._v("这个插入语句就会被阻塞，无法成功插入")]),s._v("，所以就很好了避免幻读问题。")],1)]),s._v(" "),t("h4",{attrs:{id:"_4-串行化-serializable-无脑上大锁-啥都能解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-串行化-serializable-无脑上大锁-啥都能解决"}},[s._v("#")]),s._v(" 4."),t("strong",[s._v("串行化（serializable）")]),t("font",{staticStyle:{background:"yellow"}},[s._v("无脑上大锁，啥都能解决")])],1),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("对记录加上读写锁")]),s._v("，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；")]),s._v(" "),t("p",[s._v("解决的问题：")]),s._v(" "),t("p",[s._v("✅脏读")]),s._v(" "),t("p",[s._v("✅不可重复读")]),s._v(" "),t("p",[s._v("✅幻读")]),s._v(" "),t("p",[s._v("不存在，并行化的问题了！")]),s._v(" "),t("h3",{attrs:{id:"_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[s._v("#")]),s._v(" 4进阶问题-这四种隔离级别具体是如何实现的呢？")]),s._v(" "),t("p",[s._v("（easy）对于「读未提交」隔离级别的事务来说，因为"),t("strong",[s._v("可以读到未提交事务修改的数据")]),s._v("，所以"),t("strong",[s._v("直接「马不停蹄的」读取最新的数据")]),s._v("就好了；")]),s._v(" "),t("p",[s._v("​\t对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 "),t("strong",[t("font",{staticStyle:{background:"yellow"}},[s._v("Read View （读取视图，大概意思就是当前情况创建1个试图）")]),s._v("来实现的，它们的区别在于"),t("font",{staticStyle:{background:"yellow"}},[s._v("创建 Read View 的时机不同")]),s._v("，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。")],1)]),s._v(" "),t("ul",[t("li",[s._v("「读提交」隔离级别是在「每个语句"),t("font",{staticStyle:{background:"yellow"}},[s._v("执行前")]),s._v("」都会重新生成一个 Read View")],1),s._v(" "),t("li",[s._v("而「可重复读」隔离级别是「"),t("font",{staticStyle:{background:"yellow"}},[s._v("启动事务时")]),s._v("」生成一个 Read View，然后整个事务期间都在用这个 Read View。")],1)]),s._v(" "),t("p",[s._v("注意，"),t("strong",[s._v("执行「开始事务」命令，并不意味着启动了事务")]),s._v("。在 MySQL 有两种开启事务的命令，分别是：")]),s._v(" "),t("ul",[t("li",[s._v("第一种："),t("code",[s._v("begin/start transaction")]),s._v(" 命令；")]),s._v(" "),t("li",[s._v("第二种："),t("code",[s._v("start transaction with consistent snapshot")]),s._v(" 命令；\n"),t("ul",[t("li",[t("font",{staticStyle:{background:"yellow"}},[s._v("consistent snapshot, 一致性快照")])],1)])])]),s._v(" "),t("p",[s._v("这两种开启事务的命令，事务的启动时机是不同的：")]),s._v(" "),t("ul",[t("li",[s._v("执行了 "),t("code",[s._v("begin/start transaction")]),s._v(" 命令后，并"),t("strong",[s._v("不代表事务启动了")]),s._v("。只有在执行这个命令后，执行了增删查改操作的 SQL 语句，才是事务真正启动的时机；")]),s._v(" "),t("li",[s._v("执行了 "),t("code",[s._v("start transaction with consistent snapsho")]),s._v("t 命令，就会"),t("font",{staticStyle:{background:"yellow"}},[s._v("马上启动事务")]),s._v("。")],1)]),s._v(" "),t("p",[s._v("（easy）对于「串行化」隔离级别的事务来说，通过"),t("strong",[s._v("加读写锁的方式")]),s._v("来避免并行访问；")]),s._v(" "),t("h3",{attrs:{id:"_4-2-请你介绍一下mysql的mvcc机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-请你介绍一下mysql的mvcc机制"}},[s._v("#")]),s._v(" 4.2.请你介绍一下mysql的MVCC机制")]),s._v(" "),t("p",[s._v("3个构成！")]),s._v(" "),t("p",[s._v("版本链")]),s._v(" "),t("p",[s._v("undo-logo（版本指针）")]),s._v(" "),t("p",[s._v("read view")]),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("MVCC（Multi-Version Concurrency Control，多版本并发控制）")]),s._v("，MVCC是一种多版本并发控制机制是MySQL的"),t("strong",[s._v("InnoDB存储引擎")]),t("font",{staticStyle:{background:"yellow"}},[s._v("实现")]),t("strong",[s._v("隔离级别")]),s._v("的一种具体方式，用于实现"),t("strong",[s._v("读已提交读")]),s._v("和"),t("strong",[s._v("可重复读")]),s._v("这两种隔离级别。")],1),s._v(" "),t("p",[s._v("​\tMVCC是通过保存数据在某个时间点的"),t("strong",[s._v("快照")]),s._v("来实现该机制，其在每行记录后面保存两个"),t("strong",[s._v("隐藏的列")]),s._v("，分别保存这个行的创建版本号和删除版本号，然后Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。")]),s._v(" "),t("h3",{attrs:{id:"_4-3-请问sql优化方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-请问sql优化方法有哪些"}},[s._v("#")]),s._v(" 4.3.请问SQL优化方法有哪些")]),s._v(" "),t("ul",[t("li",[s._v("1、通过"),t("strong",[s._v("建立索引")]),s._v("对查询进行优化")]),s._v(" "),t("li",[s._v("2、对"),t("strong",[s._v("查询进行优化")]),s._v("，应尽量避免全表扫描『或许这就是我们每个人写SQL语句还分级别的地方』")])]),s._v(" "),t("h3",{attrs:{id:"_4-4-说一下mysql引擎的概念和分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-说一下mysql引擎的概念和分类"}},[s._v("#")]),s._v(" 4.4.说一下MySQL引擎的概念和分类")]),s._v(" "),t("blockquote",[t("p",[s._v("MySQL引擎")])]),s._v(" "),t("p",[s._v("MySQL中的数据用"),t("strong",[s._v("各种不同的技术")]),s._v("存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。")]),s._v(" "),t("p",[s._v("数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。这包括创建用于存储数据的表和用于查看、管理和保护数据安全的数据库对象（如索引、视图和存储过程）。")]),s._v(" "),t("p",[s._v("MySQL存储引擎主要有：")]),s._v(" "),t("ul",[t("li",[s._v("MyIsam")]),s._v(" "),t("li",[s._v("InnoDB")]),s._v(" "),t("li",[s._v("Memory、Blackhole、CSV、Performance_Schema、Archive、Federated、Mrg_Myisam。")])]),s._v(" "),t("p",[s._v("但是最常用的是InnoDB和Mylsam。")]),s._v(" "),t("h3",{attrs:{id:"_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[s._v("#")]),s._v(" 4.5.说一下最常用的2个MySQL引擎InnoDB和Mylsam的对比")]),s._v(" "),t("h4",{attrs:{id:"_1、mylsam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、mylsam"}},[s._v("#")]),s._v(" 1、Mylsam")]),s._v(" "),t("p",[s._v("MyIASM是MySQL"),t("font",{staticStyle:{background:"yellow"}},[s._v("默认")]),s._v("的引擎，但是"),t("font",{staticStyle:{background:"yellow"}},[s._v("它没有提供对数据库事务的支持")]),s._v("，也不支持行级锁和外键，因此当INSERT或UPDATE数据时即写操作需要"),t("strong",[s._v("锁定整个表")]),s._v("，效率便会低一些。")],1),s._v(" "),t("p",[s._v("MyIsam 存储引擎独立于操作系统，也就是可以在windows上使用，也可以比较简单的将数据转移到linux操作系统上去。")]),s._v(" "),t("p",[t("strong",[s._v("适用场景")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("不支持事务的设计，但是并不代表着有事务操作的项目不能用MyIsam存储引擎，可以在service层进行根据自己的业务需求进行相应的控制。")])]),s._v(" "),t("li",[t("p",[s._v("不支持外键的表设计。")])]),s._v(" "),t("li",[t("p",[s._v("查询速度很快，如果数据库insert和update的操作比较多的话比较适用。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("整天对表进行加锁")]),s._v("的场景。")])]),s._v(" "),t("li",[t("p",[s._v("MyISAM极度强调快速读取操作。")])]),s._v(" "),t("li",[t("p",[s._v("MyIASM中存储了表的行数，于是"),t("code",[s._v("SELECT COUNT(*) FROM TABLE")]),s._v("时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyIASM也是很好的选择。")])])]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("就是不能在表损坏后主动恢复数据。")])]),s._v(" "),t("p",[t("strong",[s._v("索引结构")]),s._v("：")]),s._v(" "),t("p",[s._v("MyISAM索引用的"),t("strong",[s._v("B+ tree")]),s._v("来储存数据，MyISAM索引的指针指向的是键值的地址，地址存储的是数据。B+Tree的数据域存储的内容为实际数据的地址，也就是说它的索引和实际的数据是分开的，只不过是用索引指向了实际的数据，这种索引就是所谓的"),t("strong",[s._v("非聚集索引")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"_2、innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、innodb"}},[s._v("#")]),s._v(" 2、InnoDB")]),s._v(" "),t("p",[s._v("InnoDB是一个"),t("strong",[s._v("事务型")]),s._v("的存储引擎，有行级锁定和外键约束。")]),s._v(" "),t("p",[s._v("Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别，关于数据库事务与其隔离级别的内容请见数据库事务与其隔离级别这类型的文章。该引擎还提供了行级锁和外键约束")]),s._v(" "),t("p",[s._v("它的设计目标是"),t("strong",[s._v("处理大容量数据库系统")]),s._v("，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在"),t("strong",[s._v("内存")]),s._v("中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当"),t("code",[s._v("SELECT COUNT(*) FROM TABLE")]),s._v("时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。")]),s._v(" "),t("p",[t("strong",[s._v("适用场景")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("经常更新的表")]),s._v("，适合处理多重并发的更新请求。")])]),s._v(" "),t("li",[t("p",[s._v("支持事务。")])]),s._v(" "),t("li",[t("p",[s._v("可以从灾难中恢复（通过bin-log日志等）。")])]),s._v(" "),t("li",[t("p",[s._v("外键约束。只有他支持外键。")])]),s._v(" "),t("li",[t("p",[s._v("支持自动增加列属性auto_increment。")])])]),s._v(" "),t("p",[t("strong",[s._v("索引结构")]),s._v("：")]),s._v(" "),t("p",[s._v("InnoDB也是"),t("strong",[s._v("B+Tree")]),s._v("索引结构。Innodb的索引文件本身就是数据文件，即B+Tree的数据域存储的就是实际的数据，这种索引就是"),t("strong",[s._v("聚集索引")]),s._v("。这个索引的key就是数据表的主键，因此InnoDB表数据文件本身就是主索引。")]),s._v(" "),t("p",[s._v("InnoDB的辅助索引数据域存储的也是相应记录主键的值而不是地址，所以当以辅助索引查找时，会先根据辅助索引找到主键，再根据主键索引找到实际的数据。所以Innodb不建议使用过长的主键，否则会使辅助索引变得过大。建议使用自增的字段作为主键，这样B+Tree的每一个结点都会被顺序的填满，而不会频繁的分裂调整，会有效的提升插入数据的效率。")]),s._v(" "),t("h3",{attrs:{id:"最左匹配原则的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最左匹配原则的原理"}},[s._v("#")]),s._v(" 最左匹配原则的原理")]),s._v(" "),t("p",[s._v("​\t最左匹配原则都是针对"),t("strong",[s._v("联合索引")]),s._v("来说的，最左匹配原则就是指在联合索引中，如果你的 SQL 语句中用到了联合索引中的"),t("strong",[s._v("最左边的索引")]),s._v("，那么这条 SQL 语句就可以利用这个联合索引去进行匹配。例如某表现有索引(a,b,c)，现在你有如下语句：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样可以利用到定义的索引（a,b,c）,用上a,b,c")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     \t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样可以利用到定义的索引（a,b,c）,用上a,b")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     \t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样⭐可以⭐利用到定义的索引（a,b,c）,用上a,c（mysql有查询优化器）")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     \t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样也可以利用到定义的索引（a,b,c）,用上a")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样⭐不可以⭐利用到定义的索引（a,b,c）")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这样可以利用到定义的索引（a,b,c），⭐但只用上a索引⭐，b,c索引用不到")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ul",[t("li",[s._v("显然，联合索引非最左匹配还会导致"),t("strong",[s._v("索引失效")])])]),s._v(" "),t("h2",{attrs:{id:"各种索引的-术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种索引的-术语"}},[s._v("#")]),s._v(" 各种索引的-术语")]),s._v(" "),t("h3",{attrs:{id:"⭐️覆盖索引⭐️是什么、如何使用覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⭐️覆盖索引⭐️是什么、如何使用覆盖索引"}},[s._v("#")]),s._v(" ⭐️覆盖索引⭐️是什么、如何使用覆盖索引")]),s._v(" "),t("p",[s._v("覆盖索引（Covering Index），又称索引覆盖，是一种索引技术。当我们在执行 SQL 查询时，如果查询的结果集中只包括了那些已经被索引的列，那么可以利用覆盖索引直接从索引中获取数据，而无需回到数据表中进行查询，这样就避免了回表操作，提升了查询效率。")]),s._v(" "),t("p",[s._v("覆盖索引通常具有多列，而其中包括了非索引列。当 SQL 查询只用到了那些被索引列时，MySQL 不必从数据表中读取数据行，只需要通过遍历索引即可获取查询结果。因此，使用覆盖索引可以显著减少磁盘 I/O 操作和 CPU 计算，从而提高查询性能。")]),s._v(" "),t("p",[s._v("覆盖索引不仅适用于 MySQL 数据库，也广泛应用于其他关系型数据库系统。")]),s._v(" "),t("h2",{attrs:{id:"⭐️索引的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⭐️索引的分类"}},[s._v("#")]),s._v(" ⭐️索引的分类")]),s._v(" "),t("p",[s._v("​\t你知道索引有哪些吗？大家肯定都能霹雳啪啦地说出聚簇索引、主键索引、二级索引、普通索引、唯一索引、hash索引、B+树索引等等。")]),s._v(" "),t("p",[s._v("​\t然后再问你，你能将这些索引分一下类吗？可能大家就有点模糊了。其实，要对这些索引进行分类，要清楚这些索引的使用和实现方式，然后再针对有相同特点的索引归为一类。")]),s._v(" "),t("p",[s._v("​\t我们可以按照四个角度来分类索引。")]),s._v(" "),t("ul",[t("li",[s._v("按「⭐️数据结构」分类："),t("strong",[s._v("B+tree索引、Hash索引、Full-text索引")]),s._v("。")]),s._v(" "),t("li",[s._v("按「物理存储」分类："),t("strong",[s._v("聚簇索引（主键索引）、二级索引（辅助索引）")]),s._v("。")]),s._v(" "),t("li",[s._v("按「⭐️字段特性」分类："),t("strong",[s._v("主键索引、唯一索引、普通索引、前缀索引")]),s._v("。")]),s._v(" "),t("li",[s._v("按「⭐️字段个数」分类："),t("strong",[s._v("单列索引、联合索引")]),s._v("。")])]),s._v(" "),t("h4",{attrs:{id:"主键索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键索引"}},[s._v("#")]),s._v(" 主键索引")]),s._v(" "),t("p",[s._v("​\t主键索引就是建立在⭐️主键字段⭐️上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。")]),s._v(" "),t("p",[s._v("在创建表时，创建主键索引的方式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index_column_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BTREE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"唯一索引⭐️"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引⭐️"}},[s._v("#")]),s._v(" 唯一索引⭐️")]),s._v(" "),t("p",[s._v("唯一索引建立在 ⭐️UNIQUE 字段⭐️上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。")]),s._v(" "),t("p",[s._v("在创建表时，创建唯一索引的方式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index_column_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index_column_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("建表后，如果要创建唯一索引，可以使用这面这条命令：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index_column_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index_column_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"普通索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通索引"}},[s._v("#")]),s._v(" "),t("a",{attrs:{href:"https://xiaolincoding.com/mysql/index/index_interview.html#%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("#"),t("OutboundLink")],1),s._v("普通索引")]),s._v(" "),t("p",[s._v("普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。")]),s._v(" "),t("p",[s._v("在创建表时，创建普通索引的方式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index_column_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index_column_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("建表后，如果要创建普通索引，可以使用这面这条命令：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index_column_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index_column_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"前缀索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引"}},[s._v("#")]),s._v(" 前缀索引")]),s._v(" "),t("p",[s._v("前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。")]),s._v(" "),t("p",[s._v("使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。")]),s._v(" "),t("p",[s._v("在创建表时，创建前缀索引的方式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" table_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    column_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("建表后，如果要创建前缀索引，可以使用这面这条命令：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" index_name\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" table_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("column_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"附录-搭建mysql学习环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附录-搭建mysql学习环境"}},[s._v("#")]),s._v(" 附录-搭建mysql学习环境")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" @@basedir"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  //安装目录\n+-----------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" @@basedir "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-----------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" /usr/     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-----------+\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" row "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" @@datadir"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  //数据目录\n+-----------------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" @@datadir       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-----------------+\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" /var/lib/mysql/ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n+-----------------+\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" row "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"参看资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参看资料"}},[s._v("#")]),s._v(" 参看资料")]),s._v(" "),t("ul",[t("li",[s._v("哔哩哔哩，"),t("a",{attrs:{href:"https://www.bilibili.com/video/BV15Y4y1i78Y?p=3&spm_id_from=pageDriver&vd_source=ea20f1fccee6fd3f1af7d59cd3ae7575",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL技术内幕-InnoDB存储引擎"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);