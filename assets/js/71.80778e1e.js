(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{352:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"idea使用技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#idea使用技巧"}},[a._v("#")]),a._v(" IDEA使用技巧")]),a._v(" "),t("h2",{attrs:{id:"目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[a._v("#")]),a._v(" 目录")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#目录"}},[a._v("目录")])]),t("li",[t("a",{attrs:{href:"#_1-基本注意事项"}},[a._v("1.基本注意事项")])]),t("li",[t("a",{attrs:{href:"#_2-java有没有类似c-的万能头文件"}},[a._v("2.java有没有类似C++的万能头文件？")])]),t("li",[t("a",{attrs:{href:"#_3-快捷键"}},[a._v("3.快捷键")]),t("ul",[t("li",[t("a",{attrs:{href:"#main函数"}},[a._v("main函数")])]),t("li",[t("a",{attrs:{href:"#输出"}},[a._v("输出")])])])]),t("li",[t("a",{attrs:{href:"#java中三大构建工具的发展历程-ant、maven和gradle"}},[a._v("Java中三大构建工具的发展历程（Ant、Maven和Gradle）")])])])]),t("p"),a._v(" "),t("p",[a._v("[TOC]")]),a._v(" "),t("h2",{attrs:{id:"_1-基本注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本注意事项"}},[a._v("#")]),a._v(" 1.基本注意事项")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("类名要和文件名一致")])]),a._v(" "),t("li",[t("p",[a._v("文件里面只能由一个public类")])])]),a._v(" "),t("h2",{attrs:{id:"_2-java有没有类似c-的万能头文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java有没有类似c-的万能头文件"}},[a._v("#")]),a._v(" 2.java有没有类似C++的万能头文件？")]),a._v(" "),t("ul",[t("li",[a._v("没有万能")]),a._v(" "),t("li",[a._v("在IDEA中，你输入相关类会后可以按Alt+enter导入")]),a._v(" "),t("li",[a._v("java一般不需要关注导入")]),a._v(" "),t("li",[a._v("可以自动导入")])]),a._v(" "),t("h2",{attrs:{id:"_3-快捷键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-快捷键"}},[a._v("#")]),a._v(" 3.快捷键")]),a._v(" "),t("h3",{attrs:{id:"main函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main函数"}},[a._v("#")]),a._v(" main函数")]),a._v(" "),t("ul",[t("li",[a._v("直接打main+tab")]),a._v(" "),t("li",[a._v("或者psvm+tab")])]),a._v(" "),t("h3",{attrs:{id:"输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出"}},[a._v("#")]),a._v(" 输出")]),a._v(" "),t("ul",[t("li",[a._v("sout+tab")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("psvm main 函数\n\nfori for循环\n\nsout 输出\n\nshift+f6 重命名\n\nctrl+J 显示所有快捷键模板\n\nAlt+Insert 生成构造函数、toString、getter/setter、重写父类方法等\nCtrl+Y 删除行\nCtrl+D 复制行\nCtrl+</> 折叠代码\nAlt+Insert 可以新建类、方法等任何东西\nCtrl+Alt+O 格式化import列表\nCtrl+Alt+L 格式化代码\nCtrl+Alt+T 创建单元测试用例\nAlt+Shift+F10 运行程序\nShift+F9 启动调试\nCtrl+F2 停止\n\nCrtl+N：定位到Java类\nCrtl+Shift+N：定位到文件\nCrtl+Alt+Shift+N：定位到标识，这里标识主要是指Java类中的属性和函数名\n\nF9 resume programe 恢复程序\nAlt+F10 show execution point 显示执行断点\nF8 Step Over 相当于eclipse的f6 跳到下一步\nF7 Step Into 相当于eclipse的f5就是 进入到代码\nAlt+shift+F7 Force Step Into 这个是强制进入代码\nShift+F8 Step Out 相当于eclipse的f8跳到下一个断点，也相当于eclipse的f7跳出函数\nAtl+F9 Run To Cursor 运行到光标处\nctrl+shift+F9 debug运行java类\nctrl+shift+F10 正常运行java类\nalt+F8 debug时选中查看值\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br")])]),t("h2",{attrs:{id:"java中三大构建工具的发展历程-ant、maven和gradle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java中三大构建工具的发展历程-ant、maven和gradle"}},[a._v("#")]),a._v(" Java中三大构建工具的发展历程（Ant、Maven和Gradle）")]),a._v(" "),t("p",[a._v("说起Ant，就不得不说另一个Apache开源项目Tomcat。Tomcat作为轻量级Web容器，早已声名鹊起。最开始的时候，Ant是Tomcat的一部分，Ant的唯一目的就是build Tomcat。 不久，很多Java开源项目意识到Ant的简洁适用，更重要的是弥补Makefiles的不足。自从Jakarta以及Apache项目开始采用Ant以来,作为构建工具的Ant很快发展在各种各样的项目中。 在2000年1月，Ant脱离了Tomcat，成为独立的Apache开源项目，由独立的CVS模块维护，正式更名为Apache Ant")]),a._v(" "),t("p",[a._v("Maven之前我们经常使用Ant来进行Java项目的构建，然后Ant仅是一个构建工具，它并未对项目的中的工程依赖以及项目本身进行管理，并且Ant作为构建工具未能消除软件构建的重复性，因为不同的项目需要编写对应的Ant任务。")]),a._v(" "),t("p",[a._v("Maven作为后来者，继承了Ant的项目构建功能，并且提供了依赖关系，项目管理的功能，因此它是一个项目管理和综合工具， 其核心的依赖管理， 项目信息管理， 中央仓库，约定大于配置的核心功能使得Maven成为当前Java项目构建和管理工具的标准选择。")]),a._v(" "),t("p",[a._v("Maven 发展历程： Maven –> Maven2 –> Maven3")]),a._v(" "),t("p",[a._v("到目前Maven最新的版本是 2019-11-25 版本号：3.6.3")]),a._v(" "),t("p",[a._v("但是不管是什么版本，都不建议直接使用最高版本的，出现兼容性问题实在太蛋疼了，还折磨人，没有意义。")]),a._v(" "),t("p",[a._v("Gradle是一个基于Apache Ant和ApacheMaven概念的项目自动化构建开源工具。它使用一种基于Groovy的特定领域语言(DSL)来声明项目设置，目前也增加了基于Kotlin语言的kotlin-based DSL，抛弃了基于XML的各种繁琐配置。")]),a._v(" "),t("p",[a._v("由以上定义得知，Gradle已经抛弃了Ant,Maven中Xml配置的形式。Gradle继承了Maven中仓库，坐标，依赖这些核心概念。文件的布局也和Maven相同。但同时，又继承了Ant中target的概念，我们又可以重新定义自己的任务(在Gradle中叫做task)。\n————————————————\n版权声明：本文为CSDN博主「初夏0811」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/m0_37899908/article/details/109046929")])])}),[],!1,null,null,null);t.default=e.exports}}]);