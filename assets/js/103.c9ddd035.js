(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{380:function(t,a,e){"use strict";e.r(a);var r=e(13),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"项目实战与总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目实战与总结"}},[t._v("#")]),t._v(" 项目实战与总结")]),t._v(" "),a("h2",{attrs:{id:"_1-阻塞和非阻塞、同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-阻塞和非阻塞、同步和异步"}},[t._v("#")]),t._v(" 1.阻塞和非阻塞、同步和异步")]),t._v(" "),a("h2",{attrs:{id:"_2-unix、linux上的五种io模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-unix、linux上的五种io模型"}},[t._v("#")]),t._v(" 2.Unix、Linux上的五种IO模型")]),t._v(" "),a("h2",{attrs:{id:"_3-web服务器简介及http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-web服务器简介及http协议"}},[t._v("#")]),t._v(" 3.Web服务器简介及HTTP协议")]),t._v(" "),a("h2",{attrs:{id:"_4-服务器编程基本框架和两种高效的事件处理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务器编程基本框架和两种高效的事件处理模式"}},[t._v("#")]),t._v(" 4.服务器编程基本框架和两种高效的事件处理模式")]),t._v(" "),a("h2",{attrs:{id:"_5-线程同步机制类封装及线程池实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程同步机制类封装及线程池实现"}},[t._v("#")]),t._v(" 5.线程同步机制类封装及线程池实现")]),t._v(" "),a("h2",{attrs:{id:"_6-项目整体流程代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-项目整体流程代码实现"}},[t._v("#")]),t._v(" 6.项目整体流程代码实现")]),t._v(" "),a("h2",{attrs:{id:"_7-解析http请求报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-解析http请求报文"}},[t._v("#")]),t._v(" 7.解析HTTP请求报文")]),t._v(" "),a("h2",{attrs:{id:"_8-解析请求完成及生成响应信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-解析请求完成及生成响应信息"}},[t._v("#")]),t._v(" 8.解析请求完成及生成响应信息")]),t._v(" "),a("h2",{attrs:{id:"_9-定时检测非活跃连接、服务器压力测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-定时检测非活跃连接、服务器压力测试"}},[t._v("#")]),t._v(" 9.定时检测非活跃连接、服务器压力测试")]),t._v(" "),a("h2",{attrs:{id:"✔️1-阻塞和非阻塞、同步和异步-网络io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✔️1-阻塞和非阻塞、同步和异步-网络io"}},[t._v("#")]),t._v(" ✔️1.阻塞和非阻塞、同步和异步(网络IO)")]),t._v(" "),a("blockquote",[a("p",[t._v("典型的一次IO的两个阶段是什么？数据就绪 和 数据读写")])]),t._v(" "),a("p",[t._v("数据就绪：根据系统IO操作的就绪状态")]),t._v(" "),a("ul",[a("li",[t._v("阻塞")]),t._v(" "),a("li",[t._v("非阻塞")])]),t._v(" "),a("p",[t._v("数据读写：根据应用程序和内核的交互方式")]),t._v(" "),a("ul",[a("li",[t._v("同步")]),t._v(" "),a("li",[t._v("异步")])]),t._v(" "),a("p",[t._v("陈硕：在处理 IO 的时候，阻塞和非阻塞都是同步 IO，只有"),a("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("使用了特殊的 API ")]),t._v("才是异步 IO")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/20220107210122.png",alt:"image-20220107210119737"}})]),t._v(" "),a("blockquote",[a("p",[t._v("一个典型的网络IO接口调用，分为两个阶段，分别是“数据就绪” 和 “数据读写”，数据就绪阶段分为 阻塞和非阻塞，表现得结果就是，阻塞当前线程或是直接返回。")]),t._v(" "),a("p",[t._v("同步表示A向B请求调用一个网络IO接口时（或者调用某个业务逻辑API接口时），数据的读写都是 由请求方A自己来完成的（不管是阻塞还是非阻塞）；")]),t._v(" "),a("p",[t._v("异步表示A向B请求调用一个网络IO接口时 （或者调用某个业务逻辑API接口时），向B传入请求的事件以及事件发生时通知的方式，A就可以处理其它逻辑了，当B监听到事件处理完成后，会用事先约定好的通知方式，通知A处理结果。")])]),t._v(" "),a("ul",[a("li",[t._v("同步阻塞")]),t._v(" "),a("li",[t._v("同步非阻塞")]),t._v(" "),a("li",[t._v("异步阻塞")]),t._v(" "),a("li",[t._v("异步非阻塞")])]),t._v(" "),a("h2",{attrs:{id:"_2-unix-linux上的五种io模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-unix-linux上的五种io模型"}},[t._v("#")]),t._v(" 2.Unix/Linux上的五种IO模型")]),t._v(" "),a("h3",{attrs:{id:"a-阻塞-blocking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-阻塞-blocking"}},[t._v("#")]),t._v(" a.阻塞 blocking")]),t._v(" "),a("h2",{attrs:{id:"_3-web-server-网页服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-web-server-网页服务器"}},[t._v("#")]),t._v(" 3.Web Server（网页服务器）")]),t._v(" "),a("p",[t._v("一个 Web Server 就是一个服务器软件（程序），或者是运行这个服务器软件的硬件（计算机）。其主要功能是通过 HTTP 协议与客户端（通常是浏览器（Browser））进行通信，来接收，存储，处理来自 客户端的 HTTP 请求，并对其请求做出 HTTP 响应，返回给客户端其请求的内容（文件、网页等）或返 回一个 Error 信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/20220107210526.png",alt:"image-20220107210525175"}})]),t._v(" "),a("p",[t._v("通常用户使用 Web 浏览器与相应服务器进行通信。在浏览器中键入“"),a("code",[t._v("域名")]),t._v("”或“"),a("code",[t._v("IP地址:端口号")]),t._v("”，浏览器则 先将你的域名解析成相应的 IP 地址或者直接根据你的IP地址向对应的 Web 服务器发送一个 HTTP 请求。这一过程首先要通过 TCP 协议的三次握手建立与目标 Web 服务器的连接，然后 HTTP 协议生成针 对目标 Web 服务器的 HTTP 请求报文，通过 TCP、IP 等协议发送到目标 Web 服务器上。")]),t._v(" "),a("h2",{attrs:{id:"_4-http协议-应用层的协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http协议-应用层的协议"}},[t._v("#")]),t._v(" 4.HTTP协议(应用层的协议)")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求 - 响应协议，它通常运行在 TCP 之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的 头以 ASCII 形式给出；而消息内容则具有一个类似 MIME 的格式。HTTP是万维网的数据通信的基础。")]),t._v(" "),a("p",[t._v("HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万 维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定 义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。")]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("HTTP 是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览 器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们 称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如 HTML 文件和图 像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中 间层”，比如代理服务器、网关或者隧道（tunnel）。")]),t._v(" "),a("p",[t._v("尽管 TCP/IP 协议是互联网上最流行的应用，HTTP 协议中，并没有规定必须使用它或它支持的层。事实 上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP 假定其下层协议提供可靠的传输。因 此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在 TCP/IP 协议族使用 TCP 作为其传 输层。")]),t._v(" "),a("p",[t._v('通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的 TCP 连接。HTTP 服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比 如"HTTP/1.1 200 OK"，以及返回的内容，如请求的文件、错误消息、或者其它信息。')]),t._v(" "),a("h3",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),a("p",[t._v("HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客 户端。HTTP 协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方 法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版 本、成功或者错误代码、服务器信息、响应头部和响应数据。")]),t._v(" "),a("p",[t._v("以下是 HTTP 请求/响应的步骤：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("客户端连接到 Web 服务器 一个HTTP客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80 ）建立一个 TCP 套接 字连接。例如，http://www.baidu.com。（URL）")])]),t._v(" "),a("li",[a("p",[t._v("发送 HTTP 请求 通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求 头部、空行和请求数据 4 部分组成。")])]),t._v(" "),a("li",[a("p",[t._v("服务器接受请求并返回 HTTP 响应 Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个 响应由状态行、响应头部、空行和响应数据 4 部分组成。")])]),t._v(" "),a("li",[a("p",[t._v("释放连接 TCP 连接 若 connection 模式为 close，则服务器主动关闭 TCP连接，客户端被动关闭连接，释放 TCP 连 接；若connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;")])]),t._v(" "),a("li",[a("p",[t._v("客户端浏览器解析 HTML 内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应 头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。")])])]),t._v(" "),a("p",[t._v("例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：")]),t._v(" "),a("h2",{attrs:{id:"_9-epolloneshot事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-epolloneshot事件"}},[t._v("#")]),t._v(" 9.EPOLLONESHOT事件")]),t._v(" "),a("h2",{attrs:{id:"_10-服务器压力测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-服务器压力测试"}},[t._v("#")]),t._v(" 10.服务器压力测试")]),t._v(" "),a("p",[t._v("Webbench 是 Linux 上一款知名的、优秀的 web 性能压力测试工具。它是由"),a("a",{attrs:{href:"https://www.lionbridge.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lionbridge"),a("OutboundLink")],1),t._v("公司开发")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。")]),t._v(" "),a("li",[t._v("展示服务器的两项内容：每秒钟响应请求数和每秒钟传输数据量。")])])]),t._v(" "),a("p",[t._v("基本原理：Webbench 首先 fork 出多个子进程，每个子进程都循环做 web 访问测试。子进程把访问的 结果通过pipe 告诉父进程，父进程做最终的统计结果。")]),t._v(" "),a("p",[t._v("测试示例")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("webbench "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(" http://192.168.110.129:10000/index.html\n参数：\n    "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" 表示客户端数\n    "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" 表示时间\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])}),[],!1,null,null,null);a.default=_.exports}}]);