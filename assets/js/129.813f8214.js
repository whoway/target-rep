(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{414:function(t,s,a){"use strict";a.r(s);var r=a(14),_=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mysql知识点总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql知识点总结"}},[t._v("#")]),t._v(" Mysql知识点总结")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background:yellow"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background: MediumSpringGreen"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")])]),s("li",[s("a",{attrs:{href:"#学习方法论"}},[t._v("学习方法论")])]),s("li",[s("a",{attrs:{href:"#面试题"}},[t._v("面试题")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-mysql的聚集索引和非聚集索引"}},[t._v("1.MySQL的聚集索引和非聚集索引")])]),s("li",[s("a",{attrs:{href:"#实现事务必须要遵守-4-个特性"}},[t._v("实现事务必须要遵守 4 个特性？")])]),s("li",[s("a",{attrs:{href:"#进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[t._v("进阶-InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？")])]),s("li",[s("a",{attrs:{href:"#_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[t._v("2.并行事务会引发哪3个问题？详细介绍一下什么是脏读、不可重复读、幻读")])]),s("li",[s("a",{attrs:{href:"#_3-请你说一说mysql的四种隔离状态-隔离级别"}},[t._v("3.请你说一说mysql的四种隔离状态（隔离级别）")])]),s("li",[s("a",{attrs:{href:"#_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[t._v("4进阶问题-这四种隔离级别具体是如何实现的呢？")])]),s("li",[s("a",{attrs:{href:"#_4-2-请你介绍一下mysql的mvcc机制"}},[t._v("4.2.请你介绍一下mysql的MVCC机制")])]),s("li",[s("a",{attrs:{href:"#_4-3-请问sql优化方法有哪些"}},[t._v("4.3.请问SQL优化方法有哪些")])]),s("li",[s("a",{attrs:{href:"#_4-4-说一下mysql引擎的概念和分类"}},[t._v("4.4.说一下MySQL引擎的概念和分类")])]),s("li",[s("a",{attrs:{href:"#_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[t._v("4.5.说一下最常用的2个MySQL引擎InnoDB和Mylsam的对比")])]),s("li",[s("a",{attrs:{href:"#最左匹配原则的原理"}},[t._v("最左匹配原则的原理")])])])]),s("li",[s("a",{attrs:{href:"#附录-搭建mysql学习环境"}},[t._v("附录-搭建mysql学习环境")])]),s("li",[s("a",{attrs:{href:"#参看资料"}},[t._v("参看资料")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"学习方法论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习方法论"}},[t._v("#")]),t._v(" 学习方法论")]),t._v(" "),s("p",[t._v("分清楚概念中『逻辑上的』和『实现层面上的』")]),t._v(" "),s("p",[t._v("将数据结构和算法中的『逻辑结构』和『物理结构』的概念，转移到『数据库』的学习")]),t._v(" "),s("ul",[s("li",[t._v("如上：\n"),s("ul",[s("li",[s("strong",[t._v("逻辑")]),t._v("上有：隔离级别")]),t._v(" "),s("li",[s("strong",[t._v("物理实现")]),t._v("上有：MVCC啥的")])])]),t._v(" "),s("li",[t._v("优点："),s("font",{staticStyle:{background:"yellow"}},[t._v("将各种术语概念连接在一起，以后就能少被网上层次不齐的资料概念带偏")])],1)]),t._v(" "),s("h2",{attrs:{id:"面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),s("h3",{attrs:{id:"_1-mysql的聚集索引和非聚集索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql的聚集索引和非聚集索引"}},[t._v("#")]),t._v(" 1.MySQL的聚集索引和非聚集索引")]),t._v(" "),s("p",[t._v("聚集索引和非聚集索引的根本区别是表记录的排列顺序和与索引的排列顺序是否一致。")]),t._v(" "),s("p",[t._v("1、聚集索引")]),t._v(" "),s("p",[t._v("​\t聚集索引表记录的排列顺序和索引的排列顺序一致（以InnoDB聚集索引的主键索引来说，叶子节点中存储的就是行数据，行数据在物理储器中的真实地址就是按照主键索引树形成的顺序进行排列的），所以"),s("strong",[t._v("查询效率快")]),t._v("，只要找到第一个索引值记录，其余就连续性的记录在物理也一样连续存放。聚集索引对应的缺点就是"),s("strong",[t._v("修改慢")]),t._v("，因为为了保证表中记录的物理和索引顺序一致，在记录插入的时候，会对数据页重新排序（因为在真实物理存储器的存储顺序只能有一种，而插入新数据必然会导致主键索引树的变化，主键索引树的顺序发生了改变，叶子节点中存储的行数据也要随之进行改变，就会发生大量的数据移动操作，所以效率会慢）。"),s("strong",[t._v("因为在物理内存中的顺序只能有一种，所以聚集索引在一个表中只能有一个")]),t._v("。")]),t._v(" "),s("p",[t._v("2、非聚集索引")]),t._v(" "),s("p",[t._v("​\t非聚集索引制定了表中记录的逻辑顺序，但是记录的物理和索引不一定一致（在逻辑上数据是按顺序排存放的，但是物理上在真实的存储器中是散列存放的），两种索引都采用B+树结构，**非聚集索引的叶子层并不和实际数据页相重叠，而采用叶子层包含一个指向表中的记录在数据页中的指针方式。**非聚集索引层次多，不会造成数据重排。所以如果表的读操作远远多于写操作，那么就可以使用非聚集索引。")]),t._v(" "),s("h3",{attrs:{id:"实现事务必须要遵守-4-个特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现事务必须要遵守-4-个特性"}},[t._v("#")]),t._v(" 实现事务必须要遵守 4 个特性？")]),t._v(" "),s("p",[s("strong",[t._v("原子性（Atomicity）")]),t._v("：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，")]),t._v(" "),s("p",[s("strong",[t._v("持久性（Durability）")]),t._v("：事务处理结束后，对数据的修改就是永久的，即便系"),s("strong",[t._v("统故障也不会丢失")]),t._v("「因为有"),s("font",{staticStyle:{background:"yellow"}},[t._v("redo日志")]),t._v("」")],1),t._v(" "),s("p",[s("strong",[t._v("隔离性（Isolation）")]),t._v("：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。")]),t._v(" "),s("p",[s("strong",[t._v("一致性（Consistency）")]),t._v("：是指事务操作前和操作后，数据满足"),s("font",{staticStyle:{background:"yellow"}},[t._v("「完整性约束」")]),t._v("，数据库保持一致性状态。")],1),t._v(" "),s("p",[t._v("​\t我的理解：事务操作前到后的"),s("strong",[t._v("状态")]),t._v("，通过逆向操作，是"),s("font",{staticStyle:{background:"yellow"}},[t._v("可逆的")]),t._v("！")],1),t._v(" "),s("h3",{attrs:{id:"进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进阶-innodb-引擎通过什么技术来保证事务的这四个特性的呢"}},[t._v("#")]),t._v(" 进阶-InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("持久性")]),t._v("是通过 redo log （重做日志）来保证的；")]),t._v(" "),s("li",[s("strong",[t._v("原子性")]),t._v("是通过 "),s("strong",[t._v("undo log（回滚日志）")]),t._v(" 来保证的；")]),t._v(" "),s("li",[s("strong",[t._v("隔离性")]),t._v("是通过 MVCC（多版本并发控制） 或锁机制来保证的；（我觉得还有啥也不管的，马不停蹄的读）")]),t._v(" "),s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("一致性")]),t._v("则是通过持久性+原子性+隔离性来保证；")],1)]),t._v(" "),s("h3",{attrs:{id:"_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-并行事务会引发哪3个问题-详细介绍一下什么是脏读、不可重复读、幻读"}},[t._v("#")]),t._v(" 2.并行事务会引发哪3个问题？详细介绍一下什么是脏读、不可重复读、幻读")]),t._v(" "),s("p",[t._v("3种问题，因为MySQL 服务端是允许多个客户端连接的，这意味着 MySQL 会出现"),s("strong",[t._v("同时处理多个事务")]),t._v("的情况。")]),t._v(" "),s("h4",{attrs:{id:"问题严重程度从1-3变麻烦"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题严重程度从1-3变麻烦"}},[t._v("#")]),t._v(" 问题严重程度从1->3变麻烦！")]),t._v(" "),s("p",[t._v("​\t我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。")]),t._v(" "),s("ul",[s("li",[t._v("脏读：读到"),s("strong",[t._v("其他事务未提交")]),t._v("的数据；")]),t._v(" "),s("li",[t._v("不可重复读：前后"),s("strong",[t._v("读取")]),t._v("的数据不一致；")]),t._v(" "),s("li",[t._v("幻读：前后"),s("strong",[t._v("统计")]),t._v("的记录数量不一致。")])]),t._v(" "),s("p",[t._v("严重性排序："),s("font",{staticStyle:{background:"yellow"}},[t._v("幻读>不可重复读>脏读")])],1),t._v(" "),s("h4",{attrs:{id:"_1-脏读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-脏读"}},[t._v("#")]),t._v(" 1.脏读")]),t._v(" "),s("p",[t._v("2个事务操作，A事务读写数后修改数据的时候，B事物进行了读取，然后A事物后续又回滚了，那么B就是读取到了脏数据！")]),t._v(" "),s("p",[s("strong",[t._v("如果一个B事务「读到」了另一个A「"),s("font",{staticStyle:{background:"yellow"}},[t._v("未提交事务")]),t._v("修改过的数据(因为事务 A 是还没提交事务的，也就是它随时可能发生回滚操作，"),s("strong",[t._v("如果在上面这种情况事务 A 发生了回滚，那么事务 B 刚才得到的数据就是过期的数据，这种现象就被称为脏读。")]),t._v(")」，就意味着发生了「脏读」现象。")],1)]),t._v(" "),s("h4",{attrs:{id:"_2-不可重复读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-不可重复读"}},[t._v("#")]),t._v(" 2.不可重复读")]),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"}},[t._v("select操作（查询操作）")]),t._v("，在1个事务中进行前后2次查询，发现查询结果不一致！")],1),t._v(" "),s("h4",{attrs:{id:"_3-幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-幻读"}},[t._v("#")]),t._v(" 3.幻读")]),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"}},[t._v("count操作（统计操作）")]),t._v("，在1个事务中进行前后2次统计，发现结果不一致")],1),t._v(" "),s("p",[s("strong",[t._v("在一个事务内多次查询（统计）某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。")])]),t._v(" "),s("h3",{attrs:{id:"_3-请你说一说mysql的四种隔离状态-隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-请你说一说mysql的四种隔离状态-隔离级别"}},[t._v("#")]),t._v(" 3.请你说一说mysql的四种隔离状态（隔离级别）")]),t._v(" "),s("p",[t._v("​\t我们提到，当多个事务并发执行时可能会遇到「脏读、不可重复读、幻读」的现象，这些现象会对事务的一致性产生不同程序的影响。")]),t._v(" "),s("p",[t._v("​\tSQL 标准提出了四种隔离级别"),s("strong",[t._v("来规避这些现象")]),t._v("，"),s("strong",[t._v("隔离级别越高，性能效率就越低")]),t._v("，这四个隔离级别如下：")]),t._v(" "),s("p",[t._v("✅表示解决了！")]),t._v(" "),s("h4",{attrs:{id:"_4大类-隔离级别从1-4变高"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4大类-隔离级别从1-4变高"}},[t._v("#")]),t._v(" 4大类：隔离级别从1->4变高")]),t._v(" "),s("h4",{attrs:{id:"_1-读未提交-read-uncommitted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-读未提交-read-uncommitted"}},[t._v("#")]),t._v(" 1.读未提交（read-uncommitted）")]),t._v(" "),s("p",[t._v("指"),s("strong",[t._v("一个事务还没提交时")]),t._v("，它做的"),s("strong",[t._v("变更")]),t._v("就能被其他事务看到（这啥也没干，放任不管！）")]),t._v(" "),s("p",[t._v("存在的问题：")]),t._v(" "),s("p",[t._v("🚫脏读（定义就是说明这个没解决）")]),t._v(" "),s("p",[t._v("🚫不可重复读（显然，推理容易知道）")]),t._v(" "),s("p",[t._v("🚫幻读（显然，进一步推理也解决不了）")]),t._v(" "),s("h4",{attrs:{id:"_2-读提交-read-committed-名字解决了-读非提交-即脏读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-读提交-read-committed-名字解决了-读非提交-即脏读"}},[t._v("#")]),t._v(" 2."),s("strong",[t._v("读提交（read committed）")]),t._v("-"),s("font",{staticStyle:{background:"yellow"}},[t._v("名字解决了：读非提交（即脏读）")])],1),t._v(" "),s("p",[t._v("指"),s("strong",[t._v("一个事务提交之后")]),t._v("，它做的变更"),s("strong",[t._v("才能")]),t._v("被其他事务看到；（就是比第1级别，约束了一下，必须事务提交了才能被看到）")]),t._v(" "),s("p",[t._v("解决的问题：")]),t._v(" "),s("p",[t._v("✅脏读")]),t._v(" "),s("p",[t._v("存在的问题：")]),t._v(" "),s("p",[t._v("🚫不可重复读（显然，推理容易知道）")]),t._v(" "),s("p",[t._v("🚫幻读（显然，进一步推理也解决不了）")]),t._v(" "),s("h4",{attrs:{id:"_3-可重复读-repeatable-read-名字解决了-不可重复读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-可重复读-repeatable-read-名字解决了-不可重复读"}},[t._v("#")]),t._v(" 3."),s("strong",[t._v("可重复读（repeatable read）")]),s("font",{staticStyle:{background:"yellow"}},[t._v("名字解决了：不可重复读")])],1),t._v(" "),s("p",[t._v("指一个事务"),s("strong",[t._v("执行过程")]),t._v("中看到的数据，一直跟这个事务"),s("strong",[t._v("启动时")]),t._v("看到的数据是一致的，"),s("strong",[s("font",{staticStyle:{background:"yellow"}},[t._v("MySQL InnoDB 引擎的默认隔离级别")])],1),t._v("；")]),t._v(" "),s("p",[t._v("解决的问题：")]),t._v(" "),s("p",[t._v("✅脏读")]),t._v(" "),s("p",[t._v("✅不可重复读")]),t._v(" "),s("p",[t._v("存在的问题：")]),t._v(" "),s("p",[t._v("🚫幻读（显然，进一步推理也解决不了）")]),t._v(" "),s("h4",{attrs:{id:"面试扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试扩展"}},[t._v("#")]),t._v(" 面试扩展：")]),t._v(" "),s("p",[t._v("​\t不同的数据库厂商对 SQL 标准中规定的 4 种隔离级别的支持不一样，有的数据库只实现了其中几种隔离级别，"),s("strong",[t._v("我们讨论的 "),s("font",{staticStyle:{background:"yellow"}},[t._v("MySQL 虽然支持 4 种隔离级别，但是与SQL 标准中规定的各级隔离级别允许发生的现象却有些出入")])],1),t._v("。")]),t._v(" "),s("p",[t._v("​\tMySQL 在「可重复读」隔离级别下，可以"),s("font",{staticStyle:{background:"yellow"}},[t._v("很大程度上避免幻读现象的发生（注意是很大程度避免，并不是彻底避免")]),t._v("），所以 MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会"),s("strong",[t._v("影响性能")]),t._v("。")],1),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了，详见这篇"),s("a",{attrs:{href:"https://xiaolincoding.com/mysql/transaction/phantom.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章 (opens new window)"),s("OutboundLink")],1),t._v("）")]),t._v("，"),s("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("解决的方案有两种")]),t._v("：")],1),t._v(" "),s("ul",[s("li",[t._v("针对**"),s("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("快照读")]),s("strong",[t._v("（普通 select 语句），是")]),t._v("通过 "),s("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("MVCC 方式")]),t._v("解决了幻读**，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。")],1),t._v(" "),s("li",[t._v("针对**"),s("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("当前读")]),s("strong",[t._v("（select ... for update 等语句），是")]),t._v("通过 "),s("font",{staticStyle:{background:"MediumSpringGreen"}},[t._v("next-key lock（记录锁+间隙锁）")]),t._v("方式解决了幻读**，因为当执行 "),s("code",[t._v("select ... for update")]),t._v(" 语句的时候，会加上 next-key lock，如果"),s("strong",[t._v("有其他事务")]),t._v("在 next-key lock 锁范围内插入了一条记录，那么"),s("strong",[t._v("这个插入语句就会被阻塞，无法成功插入")]),t._v("，所以就很好了避免幻读问题。")],1)]),t._v(" "),s("h4",{attrs:{id:"_4-串行化-serializable-无脑上大锁-啥都能解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-串行化-serializable-无脑上大锁-啥都能解决"}},[t._v("#")]),t._v(" 4."),s("strong",[t._v("串行化（serializable）")]),s("font",{staticStyle:{background:"yellow"}},[t._v("无脑上大锁，啥都能解决")])],1),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("对记录加上读写锁")]),t._v("，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；")]),t._v(" "),s("p",[t._v("解决的问题：")]),t._v(" "),s("p",[t._v("✅脏读")]),t._v(" "),s("p",[t._v("✅不可重复读")]),t._v(" "),s("p",[t._v("✅幻读")]),t._v(" "),s("p",[t._v("不存在，并行化的问题了！")]),t._v(" "),s("h3",{attrs:{id:"_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4进阶问题-这四种隔离级别具体是如何实现的呢"}},[t._v("#")]),t._v(" 4进阶问题-这四种隔离级别具体是如何实现的呢？")]),t._v(" "),s("p",[t._v("（easy）对于「读未提交」隔离级别的事务来说，因为"),s("strong",[t._v("可以读到未提交事务修改的数据")]),t._v("，所以"),s("strong",[t._v("直接「马不停蹄的」读取最新的数据")]),t._v("就好了；")]),t._v(" "),s("p",[t._v("​\t对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 "),s("strong",[s("font",{staticStyle:{background:"yellow"}},[t._v("Read View （读取视图，大概意思就是当前情况创建1个试图）")]),t._v("来实现的，它们的区别在于"),s("font",{staticStyle:{background:"yellow"}},[t._v("创建 Read View 的时机不同")]),t._v("，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。")],1)]),t._v(" "),s("ul",[s("li",[t._v("「读提交」隔离级别是在「每个语句"),s("font",{staticStyle:{background:"yellow"}},[t._v("执行前")]),t._v("」都会重新生成一个 Read View")],1),t._v(" "),s("li",[t._v("而「可重复读」隔离级别是「"),s("font",{staticStyle:{background:"yellow"}},[t._v("启动事务时")]),t._v("」生成一个 Read View，然后整个事务期间都在用这个 Read View。")],1)]),t._v(" "),s("p",[t._v("注意，"),s("strong",[t._v("执行「开始事务」命令，并不意味着启动了事务")]),t._v("。在 MySQL 有两种开启事务的命令，分别是：")]),t._v(" "),s("ul",[s("li",[t._v("第一种："),s("code",[t._v("begin/start transaction")]),t._v(" 命令；")]),t._v(" "),s("li",[t._v("第二种："),s("code",[t._v("start transaction with consistent snapshot")]),t._v(" 命令；\n"),s("ul",[s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("consistent snapshot, 一致性快照")])],1)])])]),t._v(" "),s("p",[t._v("这两种开启事务的命令，事务的启动时机是不同的：")]),t._v(" "),s("ul",[s("li",[t._v("执行了 "),s("code",[t._v("begin/start transaction")]),t._v(" 命令后，并"),s("strong",[t._v("不代表事务启动了")]),t._v("。只有在执行这个命令后，执行了增删查改操作的 SQL 语句，才是事务真正启动的时机；")]),t._v(" "),s("li",[t._v("执行了 "),s("code",[t._v("start transaction with consistent snapsho")]),t._v("t 命令，就会"),s("font",{staticStyle:{background:"yellow"}},[t._v("马上启动事务")]),t._v("。")],1)]),t._v(" "),s("p",[t._v("（easy）对于「串行化」隔离级别的事务来说，通过"),s("strong",[t._v("加读写锁的方式")]),t._v("来避免并行访问；")]),t._v(" "),s("h3",{attrs:{id:"_4-2-请你介绍一下mysql的mvcc机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-请你介绍一下mysql的mvcc机制"}},[t._v("#")]),t._v(" 4.2.请你介绍一下mysql的MVCC机制")]),t._v(" "),s("p",[t._v("3个构成！")]),t._v(" "),s("p",[t._v("版本链")]),t._v(" "),s("p",[t._v("undo-logo（版本指针）")]),t._v(" "),s("p",[t._v("read view")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("MVCC（Multi-Version Concurrency Control，多版本并发控制）")]),t._v("，MVCC是一种多版本并发控制机制是MySQL的"),s("strong",[t._v("InnoDB存储引擎")]),s("font",{staticStyle:{background:"yellow"}},[t._v("实现")]),s("strong",[t._v("隔离级别")]),t._v("的一种具体方式，用于实现"),s("strong",[t._v("读已提交读")]),t._v("和"),s("strong",[t._v("可重复读")]),t._v("这两种隔离级别。")],1),t._v(" "),s("p",[t._v("​\tMVCC是通过保存数据在某个时间点的"),s("strong",[t._v("快照")]),t._v("来实现该机制，其在每行记录后面保存两个"),s("strong",[t._v("隐藏的列")]),t._v("，分别保存这个行的创建版本号和删除版本号，然后Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-请问sql优化方法有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-请问sql优化方法有哪些"}},[t._v("#")]),t._v(" 4.3.请问SQL优化方法有哪些")]),t._v(" "),s("ul",[s("li",[t._v("1、通过"),s("strong",[t._v("建立索引")]),t._v("对查询进行优化")]),t._v(" "),s("li",[t._v("2、对"),s("strong",[t._v("查询进行优化")]),t._v("，应尽量避免全表扫描『或许这就是我们每个人写SQL语句还分级别的地方』")])]),t._v(" "),s("h3",{attrs:{id:"_4-4-说一下mysql引擎的概念和分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-说一下mysql引擎的概念和分类"}},[t._v("#")]),t._v(" 4.4.说一下MySQL引擎的概念和分类")]),t._v(" "),s("blockquote",[s("p",[t._v("MySQL引擎")])]),t._v(" "),s("p",[t._v("MySQL中的数据用"),s("strong",[t._v("各种不同的技术")]),t._v("存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。")]),t._v(" "),s("p",[t._v("数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。这包括创建用于存储数据的表和用于查看、管理和保护数据安全的数据库对象（如索引、视图和存储过程）。")]),t._v(" "),s("p",[t._v("MySQL存储引擎主要有：")]),t._v(" "),s("ul",[s("li",[t._v("MyIsam")]),t._v(" "),s("li",[t._v("InnoDB")]),t._v(" "),s("li",[t._v("Memory、Blackhole、CSV、Performance_Schema、Archive、Federated、Mrg_Myisam。")])]),t._v(" "),s("p",[t._v("但是最常用的是InnoDB和Mylsam。")]),t._v(" "),s("h3",{attrs:{id:"_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[t._v("#")]),t._v(" 4.5.说一下最常用的2个MySQL引擎InnoDB和Mylsam的对比")]),t._v(" "),s("h4",{attrs:{id:"_1、mylsam"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、mylsam"}},[t._v("#")]),t._v(" 1、Mylsam")]),t._v(" "),s("p",[t._v("MyIASM是MySQL"),s("font",{staticStyle:{background:"yellow"}},[t._v("默认")]),t._v("的引擎，但是"),s("font",{staticStyle:{background:"yellow"}},[t._v("它没有提供对数据库事务的支持")]),t._v("，也不支持行级锁和外键，因此当INSERT或UPDATE数据时即写操作需要"),s("strong",[t._v("锁定整个表")]),t._v("，效率便会低一些。")],1),t._v(" "),s("p",[t._v("MyIsam 存储引擎独立于操作系统，也就是可以在windows上使用，也可以比较简单的将数据转移到linux操作系统上去。")]),t._v(" "),s("p",[s("strong",[t._v("适用场景")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不支持事务的设计，但是并不代表着有事务操作的项目不能用MyIsam存储引擎，可以在service层进行根据自己的业务需求进行相应的控制。")])]),t._v(" "),s("li",[s("p",[t._v("不支持外键的表设计。")])]),t._v(" "),s("li",[s("p",[t._v("查询速度很快，如果数据库insert和update的操作比较多的话比较适用。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("整天对表进行加锁")]),t._v("的场景。")])]),t._v(" "),s("li",[s("p",[t._v("MyISAM极度强调快速读取操作。")])]),t._v(" "),s("li",[s("p",[t._v("MyIASM中存储了表的行数，于是"),s("code",[t._v("SELECT COUNT(*) FROM TABLE")]),t._v("时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyIASM也是很好的选择。")])])]),t._v(" "),s("p",[s("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("就是不能在表损坏后主动恢复数据。")])]),t._v(" "),s("p",[s("strong",[t._v("索引结构")]),t._v("：")]),t._v(" "),s("p",[t._v("MyISAM索引用的"),s("strong",[t._v("B+ tree")]),t._v("来储存数据，MyISAM索引的指针指向的是键值的地址，地址存储的是数据。B+Tree的数据域存储的内容为实际数据的地址，也就是说它的索引和实际的数据是分开的，只不过是用索引指向了实际的数据，这种索引就是所谓的"),s("strong",[t._v("非聚集索引")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_2、innodb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、innodb"}},[t._v("#")]),t._v(" 2、InnoDB")]),t._v(" "),s("p",[t._v("InnoDB是一个"),s("strong",[t._v("事务型")]),t._v("的存储引擎，有行级锁定和外键约束。")]),t._v(" "),s("p",[t._v("Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别，关于数据库事务与其隔离级别的内容请见数据库事务与其隔离级别这类型的文章。该引擎还提供了行级锁和外键约束")]),t._v(" "),s("p",[t._v("它的设计目标是"),s("strong",[t._v("处理大容量数据库系统")]),t._v("，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在"),s("strong",[t._v("内存")]),t._v("中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当"),s("code",[t._v("SELECT COUNT(*) FROM TABLE")]),t._v("时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。")]),t._v(" "),s("p",[s("strong",[t._v("适用场景")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("经常更新的表")]),t._v("，适合处理多重并发的更新请求。")])]),t._v(" "),s("li",[s("p",[t._v("支持事务。")])]),t._v(" "),s("li",[s("p",[t._v("可以从灾难中恢复（通过bin-log日志等）。")])]),t._v(" "),s("li",[s("p",[t._v("外键约束。只有他支持外键。")])]),t._v(" "),s("li",[s("p",[t._v("支持自动增加列属性auto_increment。")])])]),t._v(" "),s("p",[s("strong",[t._v("索引结构")]),t._v("：")]),t._v(" "),s("p",[t._v("InnoDB也是"),s("strong",[t._v("B+Tree")]),t._v("索引结构。Innodb的索引文件本身就是数据文件，即B+Tree的数据域存储的就是实际的数据，这种索引就是"),s("strong",[t._v("聚集索引")]),t._v("。这个索引的key就是数据表的主键，因此InnoDB表数据文件本身就是主索引。")]),t._v(" "),s("p",[t._v("InnoDB的辅助索引数据域存储的也是相应记录主键的值而不是地址，所以当以辅助索引查找时，会先根据辅助索引找到主键，再根据主键索引找到实际的数据。所以Innodb不建议使用过长的主键，否则会使辅助索引变得过大。建议使用自增的字段作为主键，这样B+Tree的每一个结点都会被顺序的填满，而不会频繁的分裂调整，会有效的提升插入数据的效率。")]),t._v(" "),s("h3",{attrs:{id:"最左匹配原则的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最左匹配原则的原理"}},[t._v("#")]),t._v(" 最左匹配原则的原理")]),t._v(" "),s("p",[t._v("​\t最左匹配原则都是针对"),s("strong",[t._v("联合索引")]),t._v("来说的，最左匹配原则就是指在联合索引中，如果你的 SQL 语句中用到了联合索引中的"),s("strong",[t._v("最左边的索引")]),t._v("，那么这条 SQL 语句就可以利用这个联合索引去进行匹配。例如某表现有索引(a,b,c)，现在你有如下语句：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样可以利用到定义的索引（a,b,c）,用上a,b,c")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样可以利用到定义的索引（a,b,c）,用上a,b")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样⭐可以⭐利用到定义的索引（a,b,c）,用上a,c（mysql有查询优化器）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样也可以利用到定义的索引（a,b,c）,用上a")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样⭐不可以⭐利用到定义的索引（a,b,c）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这样可以利用到定义的索引（a,b,c），⭐但只用上a索引⭐，b,c索引用不到")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("ul",[s("li",[t._v("显然，联合索引非最左匹配还会导致"),s("strong",[t._v("索引失效")])])]),t._v(" "),s("h2",{attrs:{id:"附录-搭建mysql学习环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#附录-搭建mysql学习环境"}},[t._v("#")]),t._v(" 附录-搭建mysql学习环境")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @@basedir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  //安装目录\n+-----------+\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @@basedir "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------+\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" /usr/     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------+\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" row "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmysql"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @@datadir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  //数据目录\n+-----------------+\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @@datadir       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------------+\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" /var/lib/mysql/ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------------+\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" row "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00")]),t._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("h2",{attrs:{id:"参看资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参看资料"}},[t._v("#")]),t._v(" 参看资料")]),t._v(" "),s("ul",[s("li",[t._v("哔哩哔哩，"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV15Y4y1i78Y?p=3&spm_id_from=pageDriver&vd_source=ea20f1fccee6fd3f1af7d59cd3ae7575",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL技术内幕-InnoDB存储引擎"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=_.exports}}]);