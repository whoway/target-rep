(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{454:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-top-level-bootstrap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-top-level-bootstrap"}},[t._v("#")]),t._v(" 6.Top-level-bootstrap")]),t._v(" "),a("ul",[a("li",[t._v("翻译链接：https://gcc.gnu.org/wiki/Top-Level_Bootstrap")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background:yellow"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background:pink"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background: MediumSpringGreen"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"_1-顶层引导概述「toplevel-bootstrap-overview」"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-顶层引导概述「toplevel-bootstrap-overview」"}},[t._v("#")]),t._v(" 1.顶层引导概述「Toplevel-bootstrap overview」")]),t._v(" "),a("p",[t._v("顶级引导程序能够在所有"),a("strong",[t._v("三个阶段")]),t._v("通过单独的重新配置和重新配置 "),a("font",{staticStyle:{background:"MediumSpringGreen"}},[a("code",[t._v("libiberty/libcpp/gcc")])]),t._v("来引导编译器。实际上可以引导整个工具链，以便最终的可执行文件完全使用组合树「combined tree」中的汇编器、binutils 和链接器构建。")],1),t._v(" "),a("p",[t._v("在本地环境中进行配置时，"),a("code",[t._v("make")]),t._v("或多或少地做了一些"),a("code",[t._v("make bubblestrap")]),t._v("过去所做的事情：从 "),a("strong",[t._v("stage1")]),t._v(" 开始，重新构建必须重新构建的所有内容，如果尚未配置 stage2，则配置 stage2，构建 stage2，对于 stage3 也是如此。“重建”不限于GCC："),a("code",[t._v("libiberty")]),t._v("、"),a("code",[t._v("libcpp")]),t._v("等GCC的依赖都是经过3次配置编译。这与从头开始重建整棵树三次相同，每次都使用以前的构建作为结果。")]),t._v(" "),a("p",[t._v("它支持所有的花里胡哨。 "),a("code",[t._v("make profiledbootstrap")]),t._v("工作；当在组合树中运行时，它将构建配置文件优化的汇编器、binutils 和链接器。")]),t._v(" "),a("h2",{attrs:{id:"_2-顶层引导-备忘录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-顶层引导-备忘录"}},[t._v("#")]),t._v(" 2.顶层引导-备忘录")]),t._v(" "),a("p",[t._v("下面给出了常用操作模式的备忘单。")]),t._v(" "),a("p",[t._v("Q1) 如何引导（bootstrap）编译器去包含所有库（including all libraries）？")]),t._v(" "),a("p",[t._v("A1）从顶层目录"),a("strong",[t._v("make")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q2) 如何引导编译器，但不构建任何耗时的库（"),a("code",[t._v("libjava")]),t._v("、"),a("code",[t._v("libstdc++")]),t._v("）？")]),t._v(" "),a("p",[t._v("A2)"),a("strong",[t._v("make stage{2,3,feedback}-bubble")])]),t._v(" "),a("p",[a("em",[t._v("注意：这分别相当于旧的")]),a("code",[t._v("cd gcc && make {bootstrap2,bootstrap,profiledbootstrap}")]),t._v(" "),a("em",[t._v("。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q3) 如何只编译 stage1 编译器 + 基本运行时（libgcc、libmudflap、libgomp）？")]),t._v(" "),a("p",[t._v("A3)"),a("strong",[t._v("make stage1-bubble all-target-libmudflap all-target-libgomp")])]),t._v(" "),a("p",[a("em",[t._v("注意：我也在考虑三阶段 libmudflap 和 libgomp；在这种情况下，以上将简化为"),a("strong",[t._v("make stage1-bubble")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q4) 如何使用 stage1 编译器编译所有库（libjava，...）？")]),t._v(" "),a("p",[t._v("A4) 使用**"),a("code",[t._v("--enable-stage1-languages=all")]),a("strong",[t._v("进行配置，然后使用")]),a("code",[t._v("make stage1-bubble all-target")]),t._v("**")]),t._v(" "),a("p",[a("em",[t._v("注意：我正在考虑在非发布分支中默认启用此标志。当然，对于 GCC 开发人员来说，总是用这个标志配置他们的树是最有用的。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q5）如何"),a("strong",[t._v("清理")]),t._v("所有东西（包括stage1编译器，但不包括makefile，这样我可以从头开始构建所有东西，但不必运行configure）？")]),t._v(" "),a("p",[t._v("A5) "),a("strong",[t._v("make clean")]),t._v("（或 make cleanstrap 也启动一个引导程序）")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Q6) 如何清理除 stage1 编译器之外的所有内容？")]),t._v(" "),a("p",[t._v("A6) "),a("strong",[a("code",[t._v("make distclean-stage2 clean-target")]),a("strong",[t._v("或")]),a("code",[t._v("make restrap")])]),t._v("（这也将启动引导程序）")])])}),[],!1,null,null,null);a.default=r.exports}}]);