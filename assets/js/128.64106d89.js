(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{413:function(t,v,_){"use strict";_.r(v);var r=_(14),i=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据库基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础"}},[t._v("#")]),t._v(" 数据库基础")]),t._v(" "),v("h2",{attrs:{id:"_1-数据设计基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据设计基础"}},[t._v("#")]),t._v(" 1.数据设计基础")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png",alt:"数据库设计步骤"}})]),t._v(" "),v("h2",{attrs:{id:"_2-红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-红黑树"}},[t._v("#")]),t._v(" 2.红黑树")]),t._v(" "),v("ul",[v("li",[t._v("维基百科-"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树的应用"),v("OutboundLink")],1)])]),t._v(" "),v("h3",{attrs:{id:"_2-2-红黑树笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-红黑树笔记"}},[t._v("#")]),t._v(" 2.2.红黑树笔记")]),t._v(" "),v("blockquote",[v("p",[t._v("红黑树变色、自旋、自平衡原理")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/01.png",alt:"01"}})]),t._v(" "),v("ul",[v("li",[t._v("本节课的重点是，自旋和变色")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb002.png",alt:"rb002"}})]),t._v(" "),v("ul",[v("li",[t._v("注意：红黑树新插入的节点『必须』是红色！")]),t._v(" "),v("li",[t._v("每个叶子节点都是黑色的空节点（NIL）！")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb03.png",alt:"rbb03"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb04.png",alt:"rbb04"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb05.png",alt:"rbb05"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb06.png",alt:"rbb06"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb07.png",alt:"rbb07"}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("NIL的颜色必须是黑色的，在Java里面，他的值是NULL，因为这个叶子节点是虚拟出来的。")]),t._v(" "),v("p",[t._v("（这个是为了用来满足性质4的）")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb08.png",alt:"rbb08"}})]),t._v(" "),v("p",[t._v("很显然有2个属性；\n1）不能有两个连续的红色")]),t._v(" "),v("p",[t._v("2）红色节点，他必须有父节点，而且这个父节点一定是黑色的。")]),t._v(" "),v("p",[t._v("3）红色节点不能为根节点（性质2），所以红色节点只能为"),v("strong",[t._v("子节点")]),t._v("。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200325816.png",alt:"image-20210702200325816"}})]),t._v(" "),v("ul",[v("li",[t._v("叶子节点就是上面的，黑色椭圆。")]),t._v(" "),v("li",[t._v("红色非平衡和黑色完美平衡（中庸），红黑树是不完美平衡的。")]),t._v(" "),v("li",[t._v("AVL却是完美平衡。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb10.png",alt:"rb10"}})]),t._v(" "),v("ul",[v("li",[t._v("因为左边这样的AVL，不稳定，他这个时候退化为链表了。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb11.png",alt:"rb11"}})]),t._v(" "),v("p",[t._v("新增一个节点，你就要看看这棵树是否违反了我们红黑树的性质，然后，让他自己来平衡。")]),t._v(" "),v("p",[t._v("我们任何新增的红黑树的节点，默认都是新加"),v("strong",[t._v("红色")]),t._v("的节点。（因为这个不会影响性质5）")]),t._v(" "),v("p",[t._v("自平衡就是一个调整的过程。")]),t._v(" "),v("p",[t._v("具体的：")]),t._v(" "),v("p",[t._v("你新增的这个节点后，你去编代码的时候，你只需要考虑。从当前节点的三代！！")]),t._v(" "),v("p",[t._v("超过第4代就不管了。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200621045.png",alt:"image-20210702200621045"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200632828.png",alt:"image-20210702200632828"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb.png",alt:"rb"}})]),t._v(" "),v("p",[t._v("你祖父母都降级了，所以给他一个好处，就是把B节点给他了。")]),t._v(" "),v("p",[t._v("（只要有旋转，就会有"),v("strong",[t._v("一条线")]),t._v("互换的。）")]),t._v(" "),v("p",[v("strong",[t._v("旋转节点的圆心，一定是他的子节点！")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200729288.png",alt:"image-20210702200729288"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft.png",alt:"rbleft"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft2.png",alt:"rbleft2"}})]),t._v(" "),v("ul",[v("li",[t._v("上面的旋转，根本可以不分左边还是右边旋转。")]),t._v(" "),v("li",[t._v("下面是红黑树的操作：")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091105553.png",alt:"image-20210703091105553"}})]),t._v(" "),v("p",[t._v("CRUD")]),t._v(" "),v("p",[t._v("c-"),v("strong",[t._v("新增")])]),t._v(" "),v("p",[t._v("查找很简答--------------")]),t._v(" "),v("p",[t._v("r-读，"),v("strong",[t._v("查找")])]),t._v(" "),v("p",[t._v("U-更新（查找到后改就）")]),t._v(" "),v("p",[t._v("D-删除（复杂）")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcase.png",alt:"rbcase"}})]),t._v(" "),v("ul",[v("li",[t._v("上面是我编程的时候的很多case的。")]),t._v(" "),v("li",[t._v("上面是做红黑树的所有情况。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcreate.png",alt:"rbcreate"}})]),t._v(" "),v("p",[t._v("直系CPG在一条线上，/或者\\")]),t._v(" "),v("p",[t._v("三角关系是，不在一条直线上（也2种）")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091322201.png",alt:"image-20210703091322201"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091336549.png",alt:"image-20210703091336549"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091344050.png",alt:"image-20210703091344050"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091354784.png",alt:"image-20210703091354784"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbtrac.png",alt:"rbtrac"}})]),t._v(" "),v("ul",[v("li",[t._v("三角关系，其实就是先转换为三点一线关系。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091444837.png",alt:"image-20210703091444837"}})]),t._v(" "),v("h2",{attrs:{id:"_3-数据库的三大范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据库的三大范式"}},[t._v("#")]),t._v(" 3.数据库的三大范式")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("第一范式：当关系模式R的所有属性都不能再分解为更基本的数据单位时，称R是满足第一范式，即属性不可分")])]),t._v(" "),v("li",[v("p",[t._v("第二范式：如果关系模式R满足第一范式，并且R得所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第二范式")])]),t._v(" "),v("li",[v("p",[t._v("第三范式：设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，即非主属性不传递依赖于键码")])])]),t._v(" "),v("h3",{attrs:{id:"请你说一说数据库索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请你说一说数据库索引"}},[t._v("#")]),t._v(" .请你说一说数据库索引")]),t._v(" "),v("p",[t._v("​\t索引是对数据库表中"),v("code",[t._v("一列")]),t._v("或"),v("code",[t._v("多列")]),t._v("的值"),v("strong",[t._v("进行排序")]),t._v("的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则"),v("strong",[t._v("与在表中搜索所有的行相比，索引有助于更快地获取信息")]),t._v("。")]),t._v(" "),v("p",[t._v("索引的一个主要目的就是加快检索表中数据的方法，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的"),v("strong",[t._v("辅助数据结构")]),t._v("。")]),t._v(" "),v("p",[t._v("数据库索引是为了增加查询速度而对表字段附加的一种标识，是对数据库表中一列或多列的值进行排序的一种结构。")]),t._v(" "),v("p",[t._v("DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行"),v("strong",[t._v("全表扫描")]),t._v("，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。")]),t._v(" "),v("h3",{attrs:{id:"请你说一说inner-join和left-join"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请你说一说inner-join和left-join"}},[t._v("#")]),t._v(" 请你说一说"),v("code",[t._v("inner join")]),t._v("和"),v("code",[t._v("left join")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("left join(左联接) 返回包括"),v("strong",[t._v("左表中的所有记录")]),t._v("和"),v("code",[t._v("右表中联结字段相等")]),t._v("的记录")])]),t._v(" "),v("li",[v("p",[t._v("right join(右联接) 返回包括"),v("strong",[t._v("右表中的所有记录")]),t._v("和"),v("code",[t._v("左表中联结字段相等")]),t._v("的记录")])]),t._v(" "),v("li",[v("p",[t._v("inner join(等值连接) 只返回"),v("strong",[t._v("两个表中联结字段相")]),t._v("等的行")])])]),t._v(" "),v("h3",{attrs:{id:"多加索引一定会好吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多加索引一定会好吗"}},[t._v("#")]),t._v(" 多加索引一定会好吗")]),t._v(" "),v("ul",[v("li",[t._v("优点：")])]),t._v(" "),v("p",[t._v("​\t通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。")]),t._v(" "),v("p",[t._v("​\t可以"),v("strong",[t._v("大大加快数据的检索速度")]),t._v("，这也是创建索引的最主要的原因。")]),t._v(" "),v("p",[t._v("​\t可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。")]),t._v(" "),v("p",[t._v("​\t在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。")]),t._v(" "),v("p",[t._v("​\t通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。")]),t._v(" "),v("ul",[v("li",[t._v("缺点：")])]),t._v(" "),v("p",[t._v("​\t创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。")]),t._v(" "),v("p",[t._v("​\t索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立"),v("code",[t._v("聚簇索引")]),t._v("，那么需要的空间就会更大。")]),t._v(" "),v("p",[t._v("​\t当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。")]),t._v(" "),v("h3",{attrs:{id:"_3-8-那如果加索引呢-也就是添加索引原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-那如果加索引呢-也就是添加索引原则"}},[t._v("#")]),t._v(" 3.8.那如果加索引呢？也就是添加索引原则？")]),t._v(" "),v("p",[t._v("​\t在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。")]),t._v(" "),v("p",[t._v("​\t只有"),v("strong",[t._v("很少数据值的列")]),t._v("也不应该增加索引。这是因为，由于这些列的取值很少，例如"),v("strong",[t._v("人事表的性别列")]),t._v("，在查询的结果中，"),v("code",[t._v("结果集的数据行占了表中数据行的很大比例")]),t._v("，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。")]),t._v(" "),v("p",[t._v("​\t定义为"),v("code",[t._v("text")]),t._v("、"),v("code",[t._v("image")]),t._v("和"),v("code",[t._v("bit")]),t._v("数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。")]),t._v(" "),v("p",[t._v("​\t当"),v("strong",[t._v("修改性能")]),t._v("远远大于"),v("strong",[t._v("检索性能")]),t._v("时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。")]),t._v(" "),v("h3",{attrs:{id:"_3-9-请问k-v存储中-key有哪些要求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-请问k-v存储中-key有哪些要求"}},[t._v("#")]),t._v(" 3.9.请问k-v存储中，key有哪些要求？")]),t._v(" "),v("ul",[v("li",[t._v("兴业银行，网上收集的题目")])]),t._v(" "),v("h3",{attrs:{id:"_3-10-介绍数据库中的wal技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-介绍数据库中的wal技术"}},[t._v("#")]),t._v(" 3.10.介绍数据库中的WAL技术")]),t._v(" "),v("ul",[v("li",[t._v("WAL（Write-Ahead Logging，"),v("strong",[t._v("预写式日志")]),t._v("）")]),t._v(" "),v("li",[t._v("是一种数据安全写入机制。就是"),v("strong",[t._v("先写日志，然后在写入磁盘")]),t._v("，这样保证数据的安全性。Mysql中的Redo Log就是采用WAL机制。")]),t._v(" "),v("li",[t._v("Write-Ahead工作机制：先在内存中提交事务，然后写日志(在InnoDB中就是Redo Log，"),v("strong",[t._v("日志是为了防止宕机导致内存数据丢失")]),t._v(")，然后再后台任务中把内存中的数据"),v("strong",[t._v("异步")]),t._v("刷到磁盘。")])]),t._v(" "),v("p",[t._v("WAL优缺点")]),t._v(" "),v("p",[t._v("使用WAL代替回滚日志有其优点和缺点。")]),t._v(" "),v("p",[v("strong",[t._v("优点：")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("在大多数情况下，WAL的速度要快得多。")])]),t._v(" "),v("li",[v("p",[t._v("WAL提供了更多的并发性，因为读卡器不会阻塞写卡器，而写卡器也不会阻塞读卡器。读和写可以同时进行。")])]),t._v(" "),v("li",[v("p",[t._v("使用WAL，磁盘I/O操作往往更为连续。")])]),t._v(" "),v("li",[v("p",[t._v("WAL使用的fsync()操作更少，因此在fsync()系统调用中断的系统上不易受到问题的攻击")])])]),t._v(" "),v("p",[t._v("缺点：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("一般情况下需要VFS支持共享内存模式(shared-memory primitives)。")])]),t._v(" "),v("li",[v("p",[t._v("操作数据库文件的进程必须在同一台主机上，不能用在网络操作系统。")])]),t._v(" "),v("li",[v("p",[t._v("持有多个数据库文件的数据库连接对于单个数据库时原子的，对于全部数据库是不原子的。")])]),t._v(" "),v("li",[v("p",[t._v("进入WAL模式以后不能修改page的size。")])]),t._v(" "),v("li",[v("p",[t._v('不能打开只读的WAL数据库(Read-Only Databases)，这进程必须有"-shm"文件的写权限。')])]),t._v(" "),v("li",[v("p",[t._v("对于只进行读操作，很少进行写操作的数据库，要慢那么1到2个百分点。")])]),t._v(" "),v("li",[v("p",[t._v('会有多余的"-wal"和"-shm"文件。')])]),t._v(" "),v("li",[v("p",[t._v("需要开发者注意checkpointing检查点。")])])]),t._v(" "),v("blockquote",[v("p",[t._v("参考：")])]),t._v(" "),v("p",[t._v("版权声明：本文为CSDN博主「weixin_39811842」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_39811842/article/details/111509504")]),t._v(" "),v("h2",{attrs:{id:"关系型数据库和nosql"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库和nosql"}},[t._v("#")]),t._v(" 关系型数据库和NoSQL")]),t._v(" "),v("p",[t._v("关系型")]),t._v(" "),v("ul",[v("li",[t._v("SQLite")])]),t._v(" "),v("p",[t._v("NoSQL")]),t._v(" "),v("ul",[v("li",[t._v("MongoDB")]),t._v(" "),v("li",[t._v("Hbase")])])])}),[],!1,null,null,null);v.default=i.exports}}]);