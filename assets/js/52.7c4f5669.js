(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{339:function(t,s,a){"use strict";a.r(s);var _=a(14),r=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"server网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server网络"}},[t._v("#")]),t._v(" server网络")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background: MediumSpringGreen"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("font "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background:yellow"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#目录"}},[t._v("目录")])]),s("li",[s("a",{attrs:{href:"#网络工具列表"}},[t._v("网络工具列表")])]),s("li",[s("a",{attrs:{href:"#心跳包"}},[t._v("心跳包")])]),s("li",[s("a",{attrs:{href:"#运维经验-用网络的高峰时间是啥时候"}},[t._v("运维经验-用网络的高峰时间是啥时候？")])]),s("li",[s("a",{attrs:{href:"#✅概念辨析『重要』"}},[t._v("✅概念辨析『重要』")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-链路层、网络接口层、数据链路层"}},[t._v("1.链路层、网络接口层、数据链路层")])]),s("li",[s("a",{attrs:{href:"#_2-区分arp和rarp"}},[t._v("2.区分ARP和RARP")])])])]),s("li",[s("a",{attrs:{href:"#_1-基本概念"}},[t._v("1. 基本概念")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-1-协议"}},[t._v("1.1.协议")])]),s("li",[s("a",{attrs:{href:"#_1-2-协议格式"}},[t._v("1.2.协议格式")])])])]),s("li",[s("a",{attrs:{href:"#_2-c-s和b-s"}},[t._v("2.C/S和B/S")]),s("ul",[s("li",[s("a",{attrs:{href:"#c-s架构"}},[t._v("C/S架构")])]),s("li",[s("a",{attrs:{href:"#b-s架构"}},[t._v("B/S架构")])]),s("li",[s("a",{attrs:{href:"#总结"}},[t._v("总结")])])])]),s("li",[s("a",{attrs:{href:"#tcp-ip4层模型和os"}},[t._v("TCP/IP4层模型和OS")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-7层模型和tcp-ip4层对应方式"}},[t._v("3.1.7层模型和TCP/IP4层对应方式")])]),s("li",[s("a",{attrs:{href:"#_3-2-计算机网络中的os『重要』"}},[t._v("3.2.计算机网络中的OS『重要』")])]),s("li",[s("a",{attrs:{href:"#应用层没有固定格式-因为是各个app自己定义『重要』"}},[t._v("应用层没有固定格式-因为是各个app自己定义『重要』")])])])]),s("li",[s("a",{attrs:{href:"#什么点对点-端对端"}},[t._v("什么点对点，端对端？")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"网络工具列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络工具列表"}},[t._v("#")]),t._v(" 网络工具列表")]),t._v(" "),s("ul",[s("li",[t._v("参考"),s("a",{attrs:{href:"https://www.yiibai.com/linux/ss.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("资料"),s("OutboundLink")],1)])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Cmd")]),t._v(" "),s("th",[t._v("details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("telnet")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("curl")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("nc")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("ss")]),t._v(" "),s("td",[t._v("ss("),s("strong",[t._v("Socket Statistics")]),t._v("的缩写)命令可以用来获取 "),s("strong",[t._v("socket统计信息")]),t._v("，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。[  "),s("strong",[t._v("Statistics, 统计信息")]),t._v(" ]")])]),t._v(" "),s("tr",[s("td",[t._v("tcpdump")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("traceroute")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("ping")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("wget")]),t._v(" "),s("td")])])]),t._v(" "),s("ul",[s("li",[t._v("01.『"),s("RouterLink",{attrs:{to:"/2网络/Analyse/01.LinuxAndWindows.html"}},[t._v("Linux和Windows下网络监测工具")])],1),t._v(" "),s("li",[t._v("02.『"),s("RouterLink",{attrs:{to:"/2网络/Analyse/02.wireshark基础.html"}},[t._v("wireshark基础")])],1)]),t._v(" "),s("h2",{attrs:{id:"心跳包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#心跳包"}},[t._v("#")]),t._v(" 心跳包")]),t._v(" "),s("ul",[s("li",[t._v("server/client    保持连接状态")])]),t._v(" "),s("p",[t._v("心跳检测机制\n"),s("strong",[t._v("在TCP网络通信中，经常会出现客户端和服务器之间的非正常断开，需要实时检测查询链接状态")]),t._v("。常用的解决方法就是在程序中加入心跳机制。\n"),s("strong",[t._v("Heart-Beat线程")]),t._v("\n这个是最常用的简单方法。在接收和发送数据时个人设计一个守护进程(线程)，"),s("strong",[t._v("定时发送Heart-Beat包")]),t._v("，客户端/服务器收到该小包后，立刻返回相应的包即可检测对方是否实时在线。该方法的好处是通用，但缺点就是会改变现有的通讯协议！大家一般都是使用业务层心跳来处理，主要是灵活可控。\nUNIX网络编程不推荐使用SO_KEEPALIVE来做心跳检测，还是在业务层以心跳包做检测比较好，也方便控制。")]),t._v(" "),s("h2",{attrs:{id:"运维经验-用网络的高峰时间是啥时候"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运维经验-用网络的高峰时间是啥时候"}},[t._v("#")]),t._v(" 运维经验-用网络的高峰时间是啥时候？")]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("上午\t7:30-10:39  \n下午\t6:30-9:30  \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"✅概念辨析『重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#✅概念辨析『重要』"}},[t._v("#")]),t._v(" ✅概念辨析『重要』")]),t._v(" "),s("ul",[s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("约定，以后用的网络层次，仅用『TCP/IP四层』中的术语")])],1),t._v(" "),s("li",[t._v("『我们的网络编程研究的是4层模型，不是我们教学中的5层模型，注意！")])]),t._v(" "),s("h3",{attrs:{id:"_1-链路层、网络接口层、数据链路层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-链路层、网络接口层、数据链路层"}},[t._v("#")]),t._v(" 1.链路层、网络接口层、数据链路层")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("7层")]),t._v("模型中，只有『数据链路层』的说法（巫"),s("strong",[t._v("术")]),t._v("忘传会表应）")]),t._v(" "),s("li",[s("code",[t._v("TCP/IP")]),t._v("4层模型中，只有『链路层』或者是『网络接口层』的说法，注意概念！")])]),t._v(" "),s("h3",{attrs:{id:"_2-区分arp和rarp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-区分arp和rarp"}},[t._v("#")]),t._v(" 2.区分ARP和RARP")]),t._v(" "),s("p",[t._v("记忆方法：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("ARP和RARP，对应短和长")])]),t._v(" "),s("li",[s("p",[t._v("IP和MAC，对应短和长")])]),t._v(" "),s("li",[s("p",[t._v("用贪心算法来帮助背诵，最开始就要2个相同的吸附在一起！")])])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("ARP是借助IP地址，请求MAC地址\t『短短长』\nRARP是借助MAC地址，请求IP地址\t『长长短』\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"_1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[t._v("#")]),t._v(" 1. 基本概念")]),t._v(" "),s("h3",{attrs:{id:"_1-1-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-协议"}},[t._v("#")]),t._v(" 1.1.协议")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("协议")]),t._v("：相互约定的“数据"),s("strong",[t._v("传输")]),t._v("”和“数据"),s("strong",[t._v("解释")]),t._v("”的规则，协议是在数据传输之间就已经制定好了。")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-协议格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-协议格式"}},[t._v("#")]),t._v(" 1.2.协议格式")]),t._v(" "),s("ul",[s("li",[t._v("了解基本的或者说常用的协议格式")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("数据包基本格式:\n数-应-传-网-链路   我们扔到网络环境中的这个数据包，这个数据包的基本格式。\n也就是协议的总体格式是哪些？\n\n以太网帧（链路层）格式\narp数据包格式——arp攻击  \nIP段格式（网络层）——IP 32  \nTCP/UDP（传输层）——prot 16——65535    \nTCP格式是我们整个网络编程当中比较重要的一种格式！\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"_2-c-s和b-s"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-s和b-s"}},[t._v("#")]),t._v(" 2.C/S和B/S")]),t._v(" "),s("h3",{attrs:{id:"c-s架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-s架构"}},[t._v("#")]),t._v(" C/S架构")]),t._v(" "),s("ul",[s("li",[t._v("优点：")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("  1.协议的选用灵活，我们可以采用我们『自定义』的协议，并不一定要遵循现有的协议。\n  典型的，比如电脑上的QQ软件。客户端，典型的C/S架构。\n  2.数据可以提前缓存，比如，游戏的第一次的缓存。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("缺点：")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("1、每次使用，要下载客户端。\n客户端装在你主机上，你也不知道对你电脑做了什么事情，比如3Q大战，\n『360和QQ』互相喷，客户端对用户的安全构成威胁。\n2、需要开发客户端和服务端，两个需要联合调试，调试困难，\n『联调』（联合调试）非常闹心。而且，开发量也大。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"b-s架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-s架构"}},[t._v("#")]),t._v(" B/S架构")]),t._v(" "),s("ul",[s("li",[t._v("优点：")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("1.由于不会给主机安装客户端，啥的，相对来说，安全性要高一些。\n2.只需要开发服务器端，你采用B/S模式，你所要选用的协议就是http协议，你既然选用这个模式，\n你就要对这个协议进行『完整』的支持，『你用或者不用的这个部分，你都要支持他。』\n3.跨平台，比如网页游戏，无论是在Linux还是Windows\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ul",[s("li",[t._v("缺点：")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("1、必须支持http协议，而且不能对http裁剪，你必须支持所有，即使这个模块你不用。但是你得支持。\n2、数据是现加载，现缓存。所以，一般网页游戏是2D游戏，而不是3D游戏。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("老实说，C/S和B/S互补"),s("br"),t._v("\n数据量访问比较大：C/S模型"),s("br"),t._v("\n应用程序稳定性高：C/S模型")]),t._v(" "),s("h2",{attrs:{id:"tcp-ip4层模型和os"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip4层模型和os"}},[t._v("#")]),t._v(" TCP/IP4层模型和OS")]),t._v(" "),s("ul",[s("li",[t._v("网络分层模型")]),t._v(" "),s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("在我们的Linux操作系统中，我们的一般的"),s("strong",[t._v("应用程序")]),t._v("的角度出发，我们重点掌握的是"),s("strong",[t._v("TCP/IP四层模型")]),t._v("结结构（注意这句话）")])],1),t._v(" "),s("li",[t._v("7层和4层，其实说的是一回事，只不过，划分的理论依据和方式不太一样而已。")])]),t._v(" "),s("h3",{attrs:{id:"_3-1-7层模型和tcp-ip4层对应方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-7层模型和tcp-ip4层对应方式"}},[t._v("#")]),t._v(" 3.1.7层模型和TCP/IP4层对应方式")]),t._v(" "),s("p",[t._v("7层模型记忆法：  物数网传,会表应（"),s("strong",[t._v("巫术忘传会表应")]),t._v("）"),s("br"),t._v("\n有一说一，这个首先的学习方法就是硬背。（比如，你小时候背99乘法表，最开始不晓得干啥的，后面就开窍了，这个也是这样，暂时无法给你讲很多辅助知识，所以只能硬记）")]),t._v(" "),s("center",[s("font",{staticStyle:{background:"yellow"},attrs:{size:"5"}},[t._v("七层协议")])],1),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("7层")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("物理层")]),t._v(" "),s("td",[t._v("在网络通信过程当中，你所使用到的一"),s("strong",[t._v("些物理设备")]),t._v("的一些"),s("strong",[t._v("标准")]),t._v("。比如双绞线，光纤，我们现在使用的是光纤，早期的话，还会提到同轴电缆这样的东西。这里面所涉及到你网线的接口，它什么样的类型，都在这个里面都有一个限定。指定。还有就是你使用的这个物理设备是按照什么方式去传播的？也就是我们通常所说的bit位。传输速率是每秒多少bit，其实还有我们提到的数模转换与模数转换，高低电平的转化。")])]),t._v(" "),s("tr",[s("td",[t._v("数据链路层")]),t._v(" "),s("td",[t._v("主要，实际上是针对我们网络当中，"),s("strong",[t._v("物理层接受过来的数据")]),t._v("，进行"),s("strong",[t._v("校验")]),t._v("的，它主要是数据进行侦测和校验。"),s("br"),t._v("比如说，你数据传输过来，有没有数据的丢失啊。是否有错误啊。在它的底层有个简单的二进制的校验的规则。")])]),t._v(" "),s("tr",[s("td",[t._v("网络层")]),t._v(" "),s("td",[t._v("指定我们在传输的过程当中，提供的"),s("strong",[t._v("网络访问的路径")]),t._v("？？"),s("br"),t._v("比如说，我们知道，"),s("strong",[t._v("你要想数据包在网络当中传输，必须要给他指定一个唯一的IP地址")]),t._v("。"),s("br"),t._v("指定完IP地址之后，它通过IP地址在你当前比较"),s("strong",[t._v("繁杂的网络环境当中，进行寻路")]),t._v("。"),s("br"),t._v("通过路由的跳转，最终到达目的地。它为什么能够到达目的地？主要是你给它传的IP地址而到达的。")])]),t._v(" "),s("tr",[s("td",[t._v("传输层")]),t._v(" "),s("td",[t._v("对应的信息更加进一步了，主要携带的是"),s("strong",[t._v("端口号")]),t._v("。"),s("br"),t._v("可能大家不晓得这个端口号代表的是啥？"),s("br"),s("font",{staticStyle:{background:"yellow"}},[s("strong",[t._v("实际上，端口号实际上代表我们之前讲过的（进程）")]),s("br"),t._v("但是，我们每一个进程扔到网络环境当中的时候，会给你这个进程配上一个唯一的端口号，"),s("br"),t._v("那因此，一个唯一的端口号，可以代表一个进程，咋们知道，进程在你当前的计算机中是唯一的。")]),t._v('正是因为这个进程在计算机当中唯一，加上网络层中IP地址在网络环境当中也是唯一的。所以，它就可以在网络当中游走了。**所以，我们传输层和网络层，我们通常说他们两是捆绑使用的。**因此我们经常说“网络 传输”通常说的“网络传输"就是指的这2层而言。')],1)]),t._v(" "),s("tr",[s("td",[t._v("会话层")]),t._v(" "),s("td",[t._v("所谓的会话层和表示层："),s("br"),t._v("实际上是对我们传输层，上层的数据进行间接的封装和解封装的这样的一个过程。"),s("br"),t._v("也是为了对数据进行确认的。"),s("br"),t._v("在好多上面，会对回话和表示进行一个打包处理。"),s("br"),s("strong",[t._v("因为我们刚刚强调，你的这个会话层和表示层和应用层，在TCP/IP模型里面，统一把他称为，应用层。")]),s("br"),t._v("因为这里面，这3层的分工不是那么的明确。"),s("br"),t._v("主要是对我们发送过来的信息，进行再一次的封装。")])]),t._v(" "),s("tr",[s("td",[t._v("表示层")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("应用层")]),t._v(" "),s("td",[t._v("重点强调这个应用层："),s("br"),t._v("这个应用层，主要是"),s("strong",[t._v("针对我们应用程序")]),t._v("而言，所封装的一些协议。比如FTP，http"),s("br"),s("strong",[t._v("主要是为了方便用户对数据进行访问，把数据包拿过来，进行访问（深刻理解这句话）")]),s("br"),s("font",{staticStyle:{background:"yellow"}},[t._v("而我们的，电子邮件、文件传输和终端仿真,这些是我们在“应用层”"),s("strong",[t._v("上面")]),t._v("封装的一些协议。它是直接在我们的应用程序里面要用到的")]),s("br"),t._v("所以说，你编写的应用程序直接会用到的协议是哪层的协议？？应用层协议。")],1)])])]),t._v(" "),s("br"),t._v(" "),s("center",[s("font",{staticStyle:{background:"yellow"},attrs:{size:"5"}},[t._v("TCP/IP四层（重点）")])],1),t._v(" "),s("ul",[s("li",[t._v("1、网络接口层（也有书叫：链路层）")]),t._v(" "),s("li",[t._v("反正就是最接近底层的—>网络层（主要用到协议：IP协议）—>传输协议（一般用到TCP/UDP协议）—>应用层（比如，FTP协议，SSH协议，FTPS，"),s("strong",[t._v("USB协议，蓝牙的协议？？")]),t._v("）")]),t._v(" "),s("li",[t._v("2、以太网帧协议，加上帧头和帧尾之后，会对应有一个以太网的驱动程序，也就是说，通过以太网驱动，由我们的网卡，把我们的数据包扔到，以太网环境当中。然后，下面的那根线，实际上模拟的就是我们网络环境。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("TCP/IP")]),t._v(" "),s("th"),t._v(" "),s("th",[t._v("对应的ISO7层模型的")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("链路层（网络接口层）")]),t._v(" "),s("td",[s("font",{attrs:{size:"2"}},[t._v("最后，链路层的协议叫做——"),s("strong",[t._v("以太网帧协议")]),t._v("。")])],1),t._v(" "),s("td",[t._v("物理层、数据链路层")])]),t._v(" "),s("tr",[s("td",[t._v("网络层")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("传输层")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("应用层")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("表示层、会话层、应用层")])])])]),t._v(" "),s("p",[t._v("而下边这些协议，实际我们，会在应用程序中用到吗？不会！！！！\n"),s("strong",[t._v("也就是，除了第7层之外的其他协议，你是不会在你编写的程序当中用得到的；")])]),t._v(" "),s("p",[t._v("我们所写的应用程序，默认都是封装好了以后直接向下发送，\n比如，你在程序当中遵循的http协议，那你要遵循它的get，set方法，遵循它的这个方法，按照这个方法，去写你的数据流。写好了以后，就表示我们支持了http协议，当你程序运行起来之后，操作系统会帮助你调用以下的这些底层，1-6层。这些活都是谁干的？？？都是操作系统干的。")]),t._v(" "),s("ul",[s("li",[t._v("问题：我的应用程序当中，我有可能使用到“网络层”或者“传输层协议”啊，这\n那这个时候，你在使用的还是"),s("strong",[t._v("TCP/IP模型")]),t._v("吗？就不是了，如果你在应用程序当中，使用到了这些协议的话\n说明你"),s("strong",[t._v("使用的不再是默认的TCP/IP模型")]),t._v("。\n而我们选用的是什么协议啊？\n"),s("strong",[t._v("自定义")]),t._v("的协议！\n如果说，你采用的是"),s("strong",[t._v("自定义的协议")]),t._v("的话，我们才会在“网络层”或者“传输层“涉及到协议的这种概念。")])]),t._v(" "),s("p",[t._v("有了4层模型的基本认识之后（注意，是TCP/IP 4层模型）我们接下来要讨论的是"),s("strong",[t._v("我们的数据包如何封装，借助这4层协议，完成网络传输。")])]),t._v(" "),s("p",[t._v("首先，准备数据“啥时候还我钱”  （这个时候，要是直接放网络中，会被网络的海浪淹死）\n然后，在这个数据之外，封装上了应用层数据（这个时候，要是直接放网络中，还是会会被网络的海浪淹死）\n然后，在上面的基础上，继续封装传输层协议的，（这个时候，要是直接放网络中，照常会被网络的海浪淹死）\n然后，在上面的基础上，继续封装网络层协议的\n然后，在上面的基础上，继续封装链路层（前后，头和尾都封装，这个和以前的不一样）层协议的\n（这个时候，再放网络中，不会被网络的海浪淹死，可以正常传输）")]),t._v(" "),s("p",[t._v("注意，上面的，"),s("font",{staticStyle:{background:"red"}},[t._v("数据包的逐层封装，都是操作系统帮你干的！！,不需要我们自己来封装（也就是说，不是我们写的client.c里面做的）")]),t._v("（比如，上面，你写的数据，被封装上应用层，这是OS帮你干的的）同样，解封装，也是操作系统帮你做的。\n所以，你的数据，在网络传输前，需要操作系统帮你，你的数据才能传输。")],1),t._v(" "),s("p",[s("strong",[t._v("最后要了解，你的数据最终是从哪里出去的？？\n一定是从你的网卡里面传输出去的。所以，你的网卡要传输到你的网络环境里面。当然，这期间，可能需要经过路由器，交换机")]),t._v("\n数据要想传输，必须进行封装！")]),t._v(" "),s("h3",{attrs:{id:"_3-2-计算机网络中的os『重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-计算机网络中的os『重要』"}},[t._v("#")]),t._v(" 3.2.计算机网络中的OS『重要』")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("2大区域")]),t._v(" "),s("th",[t._v("对应TCP/IP模型")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("内核区域（kernel区）")]),t._v(" "),s("td",[t._v("链路层，网络层，传输层")])]),t._v(" "),s("tr",[s("td",[t._v("用户区域（user区）")]),t._v(" "),s("td",[t._v("应用层")])])])]),t._v(" "),s("ul",[s("li",[t._v("1.对于用户来说，我只处理，"),s("strong",[t._v("应用程序")]),t._v("的细节。")]),t._v(" "),s("li",[t._v("2.对于内核来说，它处理"),s("strong",[t._v("通信")]),t._v("的一些细节。\n比如，客户端首先封装好FTP协议，然后向下交给传输层。")]),t._v(" "),s("li",[t._v("3.所以，我们强调，这个数据的"),s("strong",[t._v("封装")]),t._v("实际上是由我们操作系统来帮我们完成的。")]),t._v(" "),s("li",[t._v("4.问题：那你这个用户区，万一用到协议呢？那需要我们在编程的过程当中对这个协议进行支持。比如，你使用FTP。你就需要使用它的put和GET")])]),t._v(" "),s("h3",{attrs:{id:"应用层没有固定格式-因为是各个app自己定义『重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用层没有固定格式-因为是各个app自己定义『重要』"}},[t._v("#")]),t._v(" 应用层没有固定格式-因为是各个app自己定义『重要』")]),t._v(" "),s("ul",[s("li",[t._v("Q：至于，"),s("strong",[t._v("应用层，它的协议有没有固定格式")]),t._v("？")]),t._v(" "),s("li",[t._v("A：没有，比如我们知道，画一条先，下3层是内核部分，应用层是user部分,用户层，你所谓的协议是什么样子的，有多少个头，携带多少个数据应该是"),s("strong",[t._v("由用户自己来确定的")]),t._v("。所以，它的协议不固定")])]),t._v(" "),s("h2",{attrs:{id:"什么点对点-端对端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么点对点-端对端"}},[t._v("#")]),t._v(" 什么点对点，端对端？")]),t._v(" "),s("p",[t._v("点对点『网络层』\n端对端『传输层』")])],1)}),[],!1,null,null,null);s.default=r.exports}}]);